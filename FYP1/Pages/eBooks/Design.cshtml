@page
@model FYP1.Pages.eBooks.DesignModel


@{
    ViewData["Title"] = "Design";
}
<style>
    .tab-selected{
        background-color: rgba(64,87,109,.07);
    }
    .selected {
        /* box-shadow: 0 0 0 1px white, 0 0 0 4px #8532FF !important; */
        z-index : 100;
    }

    .selected::before {
        content: ""; /* Add content to the pseudo-element */
        position: absolute; /* Position the pseudo-element absolutely */
        top: calc(-1 * var(--border-width)); /* Compensate for border width */
        left: calc(-1 * var(--border-width)); /* Compensate for border width */
        right: calc(-1 * var(--border-width)); /* Compensate for border width */
        bottom: calc(-1 * var(--border-width)); /* Compensate for border width */
        /* box-shadow: 0 0 0 5px rgba(0, 0, 0, 0.3); /* Adjust the shadow properties as needed */ 
        box-shadow: 0 0 0 1px white, 0 0 0 4px #8532FF !important;
        z-index: -1; /* Ensure the shadow is below the container */
    }

    .selected-border-type{
        border: solid 1px #8532FF !important;
    }
    .clip-path, .editor{
        user-select:none;
        pointer-events: none !important;
    }
    .rotation-handle {
        padding: 3px 4px;
        display: table;
        position: absolute;
        left: 50%;
        transform: translateX(-50%); /* Center horizontally */
        bottom: calc(-1 * var(--border-width) - 35px); /* Compensate for border width and additional 7px */
        background-color: #ff1661;
        border-radius: 10rem;
        line-height: 1;
        text-align: center;
        font-weight: bold;
        color: #fff;
        cursor: move;
        z-index : 100;
    }

    .pointer {
        position: absolute;
        width: 10px;
        height: 10px;
        background-color: #fff;
        border: 2px solid rgba(0, 0, 0, 0.9);
        border-radius: 50%;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        z-index: 100;
    }

    .top {
        top: calc(-1 * var(--border-width) - 7px); /* Compensate for border width and additional 7px */
    }

    .right {
        right: calc(-1 * var(--border-width) - 7px); /* Compensate for border width and additional 7px */
    }

    .left {
        left: calc(-1 * var(--border-width) - 7px); /* Compensate for border width and additional 7px */
    }

    .bottom {
        bottom: calc(-1 * var(--border-width) - 7px); /* Compensate for border width and additional 7px */
    }

    .hidden {
        display: none !important;
        pointer-events: none !important;
        user-select: none;
    }

    .ql-editor{
        pointer-events:none;
        overflow:visible !important;
        cursor:text;
    }
    .ql-snow {
        .ql-picker

    {
        &.ql-size

    {
        .ql-picker-label, .ql-picker-item

    {
        &::before

    {
        content: attr(data-value) !important;
    }

    }
    }
    }
    }

    .ql-container.ql-snow {
        border: none; /* or border: 0; */
    }
</style>
@Html.AntiForgeryToken()
<div class="e-book-design-container">
    <div class="header-design-container">
        <header data-role="Header"
                class="header-design-header-horizontal-container">
            <div class="header-design-left-group">
                <svg viewBox="0 0 1024 1024" class="header-design-more-option-icon">
                    <path d="M128 554.667h768c23.552 0 42.667-19.115 42.667-42.667s-19.115-42.667-42.667-42.667h-768c-23.552 0-42.667 19.115-42.667 42.667s19.115 42.667 42.667 42.667zM128 298.667h768c23.552 0 42.667-19.115 42.667-42.667s-19.115-42.667-42.667-42.667h-768c-23.552 0-42.667 19.115-42.667 42.667s19.115 42.667 42.667 42.667zM128 810.667h768c23.552 0 42.667-19.115 42.667-42.667s-19.115-42.667-42.667-42.667h-768c-23.552 0-42.667 19.115-42.667 42.667s19.115 42.667 42.667 42.667z"></path>
                </svg><svg viewBox="0 0 1024 1024" class="header-design-home-icon">
                    <path d="M949.845 446.635c-144.64-121.771-407.296-348.629-409.899-350.933l-27.947-24.021-27.819 24.021c-2.645 2.261-265.429 229.035-412.16 351.915-18.688 16.811-29.355 40.32-29.355 64.384 0 47.104 38.229 85.333 85.333 85.333h42.667v256c0 47.104 38.229 85.333 85.333 85.333h128 384c47.104 0 85.333-38.229 85.333-85.333v-256h42.667c47.104 0 85.333-38.229 85.333-85.333 0-25.515-11.733-49.536-31.488-65.365zM597.333 853.333h-170.667v-213.333h170.667v213.333zM768 512l0.085 341.333c-0.085 0-128.085 0-128.085 0v-256h-256v256h-128v-341.333h-128.043c117.973-98.645 312.107-265.685 384.043-327.68 71.936 61.995 265.984 228.992 384 327.723 0-0-128-0-128-0.043z"></path>
                </svg>
                <img alt="logo" src="~/images//dwei-logo.png" class="header-design-home-image" />
                <div data-thq="thq-dropdown"
                     class="header-design-file-drop-down list-item">
                    <div data-thq="thq-dropdown-toggle"
                         class="header-design-file-dropdown-toggle">
                        <span class="header-design-file-text">File</span>
                    </div>
                    <ul data-thq="thq-dropdown-list"
                        class="header-design-file-dropdown-list">
                        <li data-thq="thq-dropdown"
                            class="header-design-file-dropdown-item list-item">
                            <div data-thq="thq-dropdown-toggle"
                                 class="header-design-file-nested-dropdown-toggle">
                                <span class="header-design-file-nested-text">
                                    Sub-menu Item
                                </span>
                                <div data-thq="thq-dropdown-arrow"
                                     class="header-design-file-nested-dropdown-arrow">
                                    <svg viewBox="0 0 1024 1024"
                                         class="header-design-file-nested-dropdown-arrow-icon">
                                        <path d="M426 726v-428l214 214z"></path>
                                    </svg>
                                </div>
                            </div>
                            <ul data-thq="thq-dropdown-list"
                                class="header-design-file-nested-dropdown-list">
                                <li data-thq="thq-dropdown"
                                    class="header-design-file-nested-dropdown list-item">
                                    <div data-thq="thq-dropdown-toggle"
                                         class="header-design-file-nested-dropdown-item-container">
                                        <span class="header-design-file-nested-dropdown-toggle-text">
                                            Sub-menu Item
                                        </span>
                                    </div>
                                </li>
                            </ul>
                        </li>
                    </ul>
                </div>
                <div class="header-design-file-vertical-separator"></div>
                <svg viewBox="0 0 1024 1024" class="header-design-undo-icon">
                    <path d="M534 342q146 0 262 86t162 222l-100 32q-34-104-123-169t-201-65q-124 0-220 80l156 154h-384v-384l152 154q126-110 296-110z"></path>
                </svg><svg viewBox="0 0 1024 1024" class="header-design-redo-icon">
                    <path d="M786 452l152-154v384h-384l156-154q-96-80-220-80-102 0-197 68t-127 166l-100-32q44-136 161-222t263-86q170 0 296 110z"></path>
                </svg>
                <div class="header-design-title-verticial-separator"></div>
            </div>
            <input id="ebook-title-input" type="text" placeholder="Title" value="@Model.curBook.title" class="header-design-title-input input" />
            <div class="header-design-right-group">
                <img alt="image"
                     src="https://play.teleporthq.io/static/svg/default-img.svg"
                     class="header-design-profile-icon" />
                <div class="header-design-collaborate-container">
                    <svg viewBox="0 0 1024 1024" class="header-design-add-icon">
                        <path d="M810 554h-256v256h-84v-256h-256v-84h256v-256h84v256h256v84z"></path>
                    </svg>
                </div>
                <svg viewBox="0 0 1152 1024" class="header-design-collaborate-icon">
                    <path d="M768 770.612v-52.78c70.498-39.728 128-138.772 128-237.832 0-159.058 0-288-192-288s-192 128.942-192 288c0 99.060 57.502 198.104 128 237.832v52.78c-217.102 17.748-384 124.42-384 253.388h896c0-128.968-166.898-235.64-384-253.388z"></path>
                    <path d="M327.196 795.328c55.31-36.15 124.080-63.636 199.788-80.414-15.054-17.784-28.708-37.622-40.492-59.020-30.414-55.234-46.492-116.058-46.492-175.894 0-86.042 0-167.31 30.6-233.762 29.706-64.504 83.128-104.496 159.222-119.488-16.914-76.48-61.94-126.75-181.822-126.75-192 0-192 128.942-192 288 0 99.060 57.502 198.104 128 237.832v52.78c-217.102 17.748-384 124.42-384 253.388h279.006c14.518-12.91 30.596-25.172 48.19-36.672z"></path>
                </svg>
                <button id="print-button">
                    <span class="button header-design-print-text">
                        <span class="header-design-text">Print</span>
                        <br />
                    </span>
                </button>
                <svg viewBox="0 0 1024 1024" class="header-design-print-icon">
                    <path d="M853.333 640v170.667c0 11.776-4.736 22.4-12.501 30.165s-18.389 12.501-30.165 12.501h-597.333c-11.776 0-22.4-4.736-30.165-12.501s-12.501-18.389-12.501-30.165v-170.667c0-23.552-19.115-42.667-42.667-42.667s-42.667 19.115-42.667 42.667v170.667c0 35.328 14.379 67.413 37.504 90.496s55.168 37.504 90.496 37.504h597.333c35.328 0 67.413-14.379 90.496-37.504s37.504-55.168 37.504-90.496v-170.667c0-23.552-19.115-42.667-42.667-42.667s-42.667 19.115-42.667 42.667zM554.667 537.003v-409.003c0-23.552-19.115-42.667-42.667-42.667s-42.667 19.115-42.667 42.667v409.003l-140.501-140.501c-16.683-16.683-43.691-16.683-60.331 0s-16.683 43.691 0 60.331l213.333 213.333c3.925 3.925 8.619 7.083 13.824 9.259s10.795 3.243 16.341 3.243c10.923 0 21.845-4.181 30.165-12.501l213.333-213.333c16.683-16.683 16.683-43.691 0-60.331s-43.691-16.683-60.331 0z"></path>
                </svg>
            </div>
        </header>
    </div>

    <div class="e-book-design-design-container">
        <div class="e-book-design-element-list-container">
            <div id="add-text-tab-button" class="e-book-design-element-container">
                <svg viewBox="0 0 878.2994285714285 1024"
                     class="e-book-design-element-icon">
                    <path d="M46.286 73.714l30.857 15.429c4 1.714 108.571 2.857 120.571 2.857 50.286 0 100.571-2.286 150.857-2.286 151.429 0 304.571-3.429 456 1.714 12.571 0.571 24.571-7.429 32-17.714l24-0.571c5.143 0 10.857 0.571 16 0.571 1.143 64 1.143 128 1.143 192 0 20.571 0.571 42.286-2.857 62.286-12.571 4.571-25.714 8.571-38.857 10.286-13.143-22.857-22.286-48-30.857-73.143-4-11.429-18.286-88.571-18.857-89.714-4-5.143-9.143-8.571-15.429-10.857-4.571-1.714-32-1.143-37.714-1.143-70.286 0-151.429-4-220.571 4-2.857 25.143-5.143 52-4.571 77.714l0.571 86.857v-29.714c0.571 93.143 1.714 185.714 1.714 278.286 0 44-6.857 90.286 5.714 132.571 43.429 22.286 94.857 25.714 139.429 45.714 1.143 9.143 2.857 18.857 2.857 28.571 0 5.143-0.571 10.857-1.714 16.571l-19.429 0.571c-81.143 2.286-161.143-10.286-242.857-10.286-57.714 0-115.429 10.286-173.143 10.286-0.571-9.714-1.714-20-1.714-29.714v-5.143c21.714-34.857 100-35.429 136-56.571 14.286-32 10.286-302.286 10.286-352.571 0-8-2.857-16.571-2.857-25.143 0-23.429 4-157.714-4.571-167.429-8-8.571-82.857-6.857-92.571-6.857-24 0-158.286 12.571-172 21.714-26.857 17.714-27.429 132.571-61.714 135.429-10.286-6.286-24.571-15.429-32-25.143v-218.857zM748.571 806.286c20 0 96 68 111.429 80 8.571 6.857 14.857 16.571 14.857 28s-6.286 21.143-14.857 28c-15.429 12-91.429 80-111.429 80-26.286 0-17.143-61.143-17.143-71.429h-585.143c0 10.286 9.143 71.429-17.143 71.429-20 0-96-68-111.429-80-8.571-6.857-14.857-16.571-14.857-28s6.286-21.143 14.857-28c15.429-12 91.429-80 111.429-80 26.286 0 17.143 61.143 17.143 71.429h585.143c0-10.286-9.143-71.429 17.143-71.429z"></path>
                </svg>
                <span class="e-book-design-element-text">Text</span>
            </div>
            <div id="add-shape-tab-button" class="e-book-design-element-container">
                <svg viewBox="0 0 1024 1024" class="e-book-design-element-icon">
                    <path d="M213.333 85.333c-35.328 0-67.413 14.379-90.496 37.504s-37.504 55.168-37.504 90.496v597.333c0 35.328 14.379 67.413 37.504 90.496s55.168 37.504 90.496 37.504h597.333c35.328 0 67.413-14.379 90.496-37.504s37.504-55.168 37.504-90.496v-597.333c0-35.328-14.379-67.413-37.504-90.496s-55.168-37.504-90.496-37.504zM469.333 362.667c0-29.44-11.989-56.149-31.232-75.435s-45.995-31.232-75.435-31.232-56.149 11.989-75.435 31.232-31.232 45.995-31.232 75.435 11.989 56.149 31.232 75.435 45.995 31.232 75.435 31.232 56.149-11.989 75.435-31.232 31.232-45.995 31.232-75.435zM384 362.667c0 5.888-2.347 11.179-6.229 15.104s-9.216 6.229-15.104 6.229-11.179-2.347-15.104-6.229-6.229-9.216-6.229-15.104 2.347-11.179 6.229-15.104 9.216-6.229 15.104-6.229 11.179 2.347 15.104 6.229 6.229 9.216 6.229 15.104zM316.331 853.333l366.336-366.336 170.667 170.667v153.003c0 11.776-4.736 22.4-12.501 30.165s-18.389 12.501-30.165 12.501zM853.333 537.003l-140.501-140.501c-16.683-16.683-43.691-16.683-60.331 0l-454.144 454.144c-5.76-2.133-10.88-5.504-15.189-9.813-7.765-7.765-12.501-18.389-12.501-30.165v-597.333c0-11.776 4.736-22.4 12.501-30.165s18.389-12.501 30.165-12.501h597.333c11.776 0 22.4 4.736 30.165 12.501s12.501 18.389 12.501 30.165z"></path>
                </svg>
                <span class="e-book-design-element-text">Shape</span>
            </div>
            <div id="add-image-tab-button" class="e-book-design-element-container">
                <svg viewBox="0 0 1024 1024" class="e-book-design-element-icon">
                    <path d="M213.333 85.333c-35.328 0-67.413 14.379-90.496 37.504s-37.504 55.168-37.504 90.496v597.333c0 35.328 14.379 67.413 37.504 90.496s55.168 37.504 90.496 37.504h597.333c35.328 0 67.413-14.379 90.496-37.504s37.504-55.168 37.504-90.496v-597.333c0-35.328-14.379-67.413-37.504-90.496s-55.168-37.504-90.496-37.504zM469.333 362.667c0-29.44-11.989-56.149-31.232-75.435s-45.995-31.232-75.435-31.232-56.149 11.989-75.435 31.232-31.232 45.995-31.232 75.435 11.989 56.149 31.232 75.435 45.995 31.232 75.435 31.232 56.149-11.989 75.435-31.232 31.232-45.995 31.232-75.435zM384 362.667c0 5.888-2.347 11.179-6.229 15.104s-9.216 6.229-15.104 6.229-11.179-2.347-15.104-6.229-6.229-9.216-6.229-15.104 2.347-11.179 6.229-15.104 9.216-6.229 15.104-6.229 11.179 2.347 15.104 6.229 6.229 9.216 6.229 15.104zM316.331 853.333l366.336-366.336 170.667 170.667v153.003c0 11.776-4.736 22.4-12.501 30.165s-18.389 12.501-30.165 12.501zM853.333 537.003l-140.501-140.501c-16.683-16.683-43.691-16.683-60.331 0l-454.144 454.144c-5.76-2.133-10.88-5.504-15.189-9.813-7.765-7.765-12.501-18.389-12.501-30.165v-597.333c0-11.776 4.736-22.4 12.501-30.165s18.389-12.501 30.165-12.501h597.333c11.776 0 22.4 4.736 30.165 12.501s12.501 18.389 12.501 30.165z"></path>
                </svg>
                <span class="e-book-design-element-text">Image</span>
            </div>
            <div id="add-chart-tab-button" class="e-book-design-element-container">
                <svg viewBox="0 0 1024 1024" class="e-book-design-element-icon">
                    <path d="M365.714 512v292.571h-146.286v-292.571h146.286zM585.143 219.429v585.143h-146.286v-585.143h146.286zM1170.286 877.714v73.143h-1170.286v-877.714h73.143v804.571h1097.143zM804.571 365.714v438.857h-146.286v-438.857h146.286zM1024 146.286v658.286h-146.286v-658.286h146.286z"></path>
                </svg>
                <span class="e-book-design-element-text">Chart</span>
            </div>
            <div class="e-book-design-back-container">
                <svg viewBox="0 0 1024 1024" class="e-book-design-back-icon">
                    <path d="M512 386.517v-109.184c0-10.923-4.181-21.845-12.501-30.208-8.32-8.32-19.243-12.459-30.165-12.459s-21.845 4.139-30.165 12.459l-268.501 264.875 268.501 264.832c8.32 8.32 19.243 12.501 30.165 12.501s21.845-4.181 30.165-12.501 12.501-19.285 12.501-30.165v-106.197c117.333 2.901 245.547 24.149 341.333 170.197v-42.667c0-197.675-149.333-360.235-341.333-381.483z"></path>
                </svg>
                <span class="e-book-design-back-text">Back</span>
            </div>
        </div>
        <div id="add-text" class="hidden design-add-page-container">
            <div class="design-add-page-search-container">
                <svg viewBox="0 0 950.8571428571428 1024"
                     class="design-add-page-search-icon">
                    <path d="M658.286 475.429c0-141.143-114.857-256-256-256s-256 114.857-256 256 114.857 256 256 256 256-114.857 256-256zM950.857 950.857c0 40-33.143 73.143-73.143 73.143-19.429 0-38.286-8-51.429-21.714l-196-195.429c-66.857 46.286-146.857 70.857-228 70.857-222.286 0-402.286-180-402.286-402.286s180-402.286 402.286-402.286 402.286 180 402.286 402.286c0 81.143-24.571 161.143-70.857 228l196 196c13.143 13.143 21.143 32 21.143 51.429z"></path>
                </svg>
                <input id="search-text" type="text"
                       placeholder="Search Item...."
                       class="design-add-page-search-input input" />
            </div>
            <span class="design-add-page-heading-text">
                <span>Default Text Style</span>
            </span>
            <button type="button" class="design-add-page-black-element-button button">
                <p><span style="font-size:13px">Default Text</span></p>
            </button>
            <span class="design-add-page-heading-text">
                <span>Predesigned Text</span>
            </span>
            <button type="button" val="123" class="design-add-page-white-element-button button">
                <p><strong style="font-size:32px;color: rgb(0, 0, 0);">Heading Text</strong></p>
            </button>
            <button type="button" val="123" class="design-add-page-white-element-button button">
                <p><span style="font-size:24px;color: rgb(0, 0, 0);">Subtitle Text</span></p>
            </button>
            <button type="button" val="123" class="design-add-page-white-element-button button">
                <p><span style="font-size:16px;color: rgb(0, 0, 0);">Body Text</span></p>
            </button>
            <button type="button" val="123" class="design-add-page-white-element-button button">
                <p><i style="font-size:20px;color: rgb(0, 0, 0);">Description Text</i></p>
            </button>
            <button type="button" val="123" class="design-add-page-white-element-button button">
                <p><strong style="font-size:16px;color: rgb(255, 0, 0);">Warning Text</strong></p>
            </button>
        </div>
        <div id="add-shape" class="hidden design-add-page-container">
            <div class="design-add-page-search-container">
                <svg viewBox="0 0 950.8571428571428 1024"
                     class="design-add-page-search-icon">
                    <path d="M658.286 475.429c0-141.143-114.857-256-256-256s-256 114.857-256 256 114.857 256 256 256 256-114.857 256-256zM950.857 950.857c0 40-33.143 73.143-73.143 73.143-19.429 0-38.286-8-51.429-21.714l-196-195.429c-66.857 46.286-146.857 70.857-228 70.857-222.286 0-402.286-180-402.286-402.286s180-402.286 402.286-402.286 402.286 180 402.286 402.286c0 81.143-24.571 161.143-70.857 228l196 196c13.143 13.143 21.143 32 21.143 51.429z"></path>
                </svg>
                <input id="search-shape" type="text"
                       placeholder="Search Item...."
                       class="design-add-page-search-input input" />
            </div>
            <span class="design-add-page-heading-text">
                <span>Shape</span>
            </span>
            <div class="design-add-page-grid-container">
                <div class="design-add-page-grid-content">
                    <button id="square" type="button" class="design-add-page-grid-button">
                        <div style="width:100%;height:100%; background-color: #C9D2DA"></div>
                    </button>
                </div>
                <div class="design-add-page-grid-content">
                    <button id="triangle" type="button" class="design-add-page-grid-button">
                        <div style="width:100%;height:100%; background-color: #C9D2DA; clip-path: polygon(50% 0%, 0% 100%, 100% 100%);"></div>
                    </button>
                </div>
                
                <div class="design-add-page-grid-content">
                    <button id="circle" type="button" class="design-add-page-grid-button">
                        <div style="width:100%;height:100%; background-color: #C9D2DA; clip-path: circle(50% at center);"></div>
                    </button>
                </div>
                <div class="design-add-page-grid-content">
                    <button id="pentagon" type="button" class="design-add-page-grid-button">
                        <div style="width:100%;height:100%; background-color: #C9D2DA; clip-path: polygon(50% 0%, 100% 38%, 82% 100%, 18% 100%, 0% 38%);"></div>
                    </button>
                </div>
                <div class="design-add-page-grid-content">
                    <button id="parallelogram" type="button" class="design-add-page-grid-button">
                        <div style="width:100%;height:100%; background-color: #C9D2DA; clip-path: polygon(20% 0%, 100% 0%, 80% 100%, 0% 100%);"></div>
                    </button>
                </div>
                <div class="design-add-page-grid-content">
                    <button id="star" type="button" class="design-add-page-grid-button">
                        <div style="width:100%;height:100%; background-color: #C9D2DA; clip-path: polygon(50% 0%, 61% 35%, 98% 35%, 68% 57%, 79% 91%, 50% 70%, 21% 91%, 32% 57%, 2% 35%, 39% 35%);"></div>
                    </button>
                </div>
                <div class="design-add-page-grid-content">
                    <button id="hexagon" type="button" class="design-add-page-grid-button">
                        <div style="width:100%;height:100%; background-color: #C9D2DA; clip-path: polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0% 50%);"></div>
                    </button>
                </div>
                <div class="design-add-page-grid-content">
                    <button id="octagon" type="button" class="design-add-page-grid-button">
                        <div style="width:100%;height:100%; background-color: #C9D2DA; clip-path: polygon(25% 0%, 75% 0%, 100% 25%, 100% 75%, 75% 100%, 25% 100%, 0% 75%, 0% 25%);"></div>
                    </button>
                </div>
                <div class="design-add-page-grid-content">
                    <button id="diamond" type="button" class="design-add-page-grid-button">
                        <div style="width:100%;height:100%; background-color: #C9D2DA; clip-path: polygon(50% 0%, 100% 50%, 50% 100%, 0% 50%);"></div>
                    </button>
                </div>
                <div class="design-add-page-grid-content">
                    <button id="cross" type="button" class="design-add-page-grid-button">
                        <div style="width:100%;height:100%; background-color: #C9D2DA; clip-path: polygon(0% 30%, 30% 30%, 30% 0%, 70% 0%, 70% 30%, 100% 30%, 100% 70%, 70% 70%, 70% 100%, 30% 100%, 30% 70%, 0% 70%);"></div>
                    </button>
                </div>
                <div class="design-add-page-grid-content">
                    <button id="message" type="button" class="design-add-page-grid-button">
                        <div style="width:100%;height:100%; background-color: #C9D2DA; clip-path: polygon(0% 0%, 100% 0%, 100% 75%, 75% 75%, 75% 100%, 50% 75%, 0% 75%);"></div>
                    </button>
                </div>
                <div class="design-add-page-grid-content">
                    <button id="close" type="button" class="design-add-page-grid-button">
                        <div style="width:100%;height:100%; background-color: #C9D2DA; clip-path: polygon(20% 0%, 0% 20%, 30% 50%, 0% 80%, 20% 100%, 50% 70%, 80% 100%, 100% 80%, 70% 50%, 100% 20%, 80% 0%, 50% 30%);"></div>
                    </button>
                </div>
                <div class="design-add-page-grid-content">
                    <button id="left-chevron" type="button" class="design-add-page-grid-button">
                        <div style="width:100%;height:100%; background-color: #C9D2DA; clip-path: polygon(100% 0%, 75% 50%, 100% 100%, 25% 100%, 0% 50%, 25% 0%);"></div>
                    </button>
                </div>
                <div class="design-add-page-grid-content">
                    <button id="right-chevron" type="button" class="design-add-page-grid-button">
                        <div style="width:100%;height:100%; background-color: #C9D2DA; clip-path: polygon(75% 0%, 100% 50%, 75% 100%, 0% 100%, 25% 50%, 0% 0%);"></div>
                    </button>
                </div>
                <div class="design-add-page-grid-content">
                    <button id="right-arrow" type="button" class="design-add-page-grid-button">
                        <div style="width:100%;height:100%; background-color: #C9D2DA; clip-path: polygon(0% 20%, 60% 20%, 60% 0%, 100% 50%, 60% 100%, 60% 80%, 0% 80%);"></div>
                    </button>
                </div>
                <div class="design-add-page-grid-content">
                    <button id="left-arrow" type="button" class="design-add-page-grid-button">
                        <div style="width:100%;height:100%; background-color: #C9D2DA; clip-path: polygon(40% 0%, 40% 20%, 100% 20%, 100% 80%, 40% 80%, 40% 100%, 0% 50%);"></div>
                    </button>
                </div>
                <div class="design-add-page-grid-content">
                    <button id="trapezoid" type="button" class="design-add-page-grid-button">
                        <div style="width:100%;height:100%; background-color: #C9D2DA; clip-path: polygon(20% 0%, 80% 0%, 100% 100%, 0% 100%);"></div>
                    </button>
                </div>
                <div class="design-add-page-grid-content">
                    <button id="heart" type="button" class="design-add-page-grid-button">
                        <div style="width:100%;height:100%; background-color: #C9D2DA; mask: radial-gradient(at 70% 31%,#000 29%,#0000 30%),radial-gradient(at 30% 31%,#000 29%,#0000 30%),linear-gradient(#000 0 0) bottom/100% 50% no-repeat; clip-path: polygon(-41% 0,50% 91%, 141% 0);"></div>
                    </button>
                </div>
            </div>
        </div>
        <div id="add-image" class="hidden design-add-page-container">
            <span class="design-add-page-heading-text">
                <span>Image</span>
            </span>
            <div style="height:48px !important; width:100%">
            <button id="upload-photo-button" type="button" class="design-add-page-black-element-button button">
                <span>Upload photo</span>
            </button>
            </div>
            <input hidden type="file" id="upload-photo-input" name="file" accept=".jpg, .jpeg, .png" multiple="false" />

            @*             <div class="form-group">
            <label asp-for="Post.postImageFile" class="control-label"></label>
            <input type="file" asp-for="Post.postImageFile" class="form-control" />
            <span asp-validation-for="Post.postImageFile" class="text-danger"></span>
            </div> *@
            <img id="brown-ebook-explanation" src="~/images/design-images/brown-ebook-explanation.jpeg" class="design-add-page-gallery" />
            <img id="brown-ebook-image" src="~/images/design-images/brown-ebook-image.jpg" class="design-add-page-gallery" />
            <img id="children-in-classroom" src="~/images/design-images/children-in-classroom.jpg" class="design-add-page-gallery" />
            <img id="children-reading-image" src="~/images/design-images/children-reading-image.jpg" class="design-add-page-gallery" />
            <img id="green-ebook-image" src="~/images/design-images/green-ebook-image.jpeg" class="design-add-page-gallery" />
            <img id="view-ebook-action" src="~/images/design-images/view-ebook-action.jpeg" class="design-add-page-gallery" />
            <img id="book-flying-effects" src="~/images/design-images/book-flying-effects.png" class="design-add-page-gallery" />
        </div>
        <div id="add-chart" class="design-add-page-container hidden">
            <div class="design-add-page-search-container">
                <svg viewBox="0 0 950.8571428571428 1024"
                     class="design-add-page-search-icon">
                    <path d="M658.286 475.429c0-141.143-114.857-256-256-256s-256 114.857-256 256 114.857 256 256 256 256-114.857 256-256zM950.857 950.857c0 40-33.143 73.143-73.143 73.143-19.429 0-38.286-8-51.429-21.714l-196-195.429c-66.857 46.286-146.857 70.857-228 70.857-222.286 0-402.286-180-402.286-402.286s180-402.286 402.286-402.286 402.286 180 402.286 402.286c0 81.143-24.571 161.143-70.857 228l196 196c13.143 13.143 21.143 32 21.143 51.429z"></path>
                </svg>
                <input id="search-chart" type="text"
                       placeholder="Search Item...."
                       class="design-add-page-search-input input" />
            </div>
            <span class="design-add-page-heading-text">
                <span>Bar Graph</span>
            </span>
            <div class="design-add-page-grid-container">
                <div class="design-add-page-grid-content">
                    <button type="button" class="design-add-page-grid-button">
                        <div style="width:100%;height:100%;border:solid 1px"></div>
                    </button>
                    <button type="button" class="design-add-page-grid-button">
                        <div style="width:100%;height:100%;border:solid 1px;border-radius:50%"></div>
                    </button>
                </div>
            </div>
            <span class="design-add-page-heading-text">
                <span>Line Graph</span>
            </span>
            <div class="design-add-page-grid-container">
                <div class="design-add-page-grid-content">
                    <button type="button" class="design-add-page-grid-button">
                        <div style="width:100%;height:100%;border:solid 1px"></div>
                    </button>
                    <button type="button" class="design-add-page-grid-button">
                        <div style="width:100%;height:100%;border:solid 1px;border-radius:50%"></div>
                    </button>
                </div>
            </div>
        </div>
        <div id="edit-position" class=" hidden design-edit-page-container">
            <div class="design-edit-page-heading-container">
                <span class="design-edit-page-heading-text">
                    <span>Edit Position</span>
                </span>
            </div>
            <span class="design-edit-page-section-header"><span>Arrange</span></span>
            <div class="design-edit-page-arrange-container">
                <div class="design-edit-page-arrange-content element-up-button">
                    <svg viewBox="0 0 1024 1024" class="design-edit-page-arrange-icon">
                        <path d="M470 384h128v128h-128v-128zM470 554h128v300h-128v-300zM682 554h128v86h-128v-86zM682 682h128v172h-128v-172zM256 214h128v170h-128v-170zM256 426h128v428h-128v-428z"></path>
                    </svg>
                    <span class="design-edit-page-arrange-text">
                        <span>Forward</span>
                    </span>
                </div>
                <div class="design-edit-page-arrange-content element-down-button">
                    <svg viewBox="0 0 1024 1024" class="design-edit-page-arrange-icon">
                        <path d="M554 384h-128v128h128v-128zM554 554h-128v300h128v-300zM342 554h-128v86h128v-86zM342 682h-128v172h128v-172zM768 214h-128v170h128v-170zM768 426h-128v428h128v-428z"></path>
                    </svg>
                    <span class="design-edit-page-arrange-text">
                        <span>Backward</span>
                    </span>
                </div>
            </div>
            <div class="design-edit-page-section-separator"></div>
            <span class="design-edit-page-section-header"><span>Advanced</span></span>
            <div class="design-edit-page-position-container">
                <span class="design-edit-page-position-text"><span>X</span></span>
                <span class="design-edit-page-position-text"><span>Y</span></span>
                <span class="design-edit-page-position-text"><span>Rotate</span></span>
                <input id="x-position" type="text" placeholder="172 px" class="design-edit-page-position-input input" />
                <input id="y-position" type="text" placeholder="172 px" class="design-edit-page-position-input input" />
                <input id="rotate-position" type="text" placeholder="172 px" class="design-edit-page-position-input input" />
            </div>
            <div class="design-edit-page-section-separator"></div>
            <span class="design-edit-page-section-header"><span>Container Size</span></span>

            <div class="design-edit-page-size-container">
                <span class="design-edit-page-size-text"><span>Width</span></span>
                <span class="design-edit-page-size-text"><span>Height</span></span>
                <input id="width" type="text" placeholder="172 px" class="design-edit-page-size-input input" />
                <input id="height" type="text" placeholder="172 px" class="design-edit-page-size-input input" />
            </div>
        </div>
        <div id="edit-border" class="hidden design-edit-page-container">
            <div class="design-edit-page-heading-container">
                <span class="design-edit-page-heading-text">
                    <span>Edit Border</span>
                </span>
            </div>
            <span class="design-edit-page-section-header"><span>Properties</span></span>
            <div class="design-edit-page-size-container">
                <span class="design-edit-page-size-text"><span>Width</span></span>
                <span class="design-edit-page-size-text"><span>Roundness</span></span>
                <input id="border-width" type="text" placeholder="172 px" class="design-edit-page-size-input input" />
                <input id="border-round" type="text" placeholder="172 px" class="design-edit-page-size-input input" />
            </div>
            <div class="design-edit-page-section-separator"></div>
            <span class="design-edit-page-section-header"><span>Style</span></span>
            <div class="design-edit-page-border-list-container">
                <div class="design-edit-page-border-type-container">
                    <div class="design-edit-page-no-border"></div>
                </div>
                <div class="design-edit-page-border-type-container">
                    <div class="design-edit-page-solid-border"></div>
                </div>
                <div class="design-edit-page-border-type-container">
                    <div class="design-edit-page-dotted-border"></div>
                </div>
                <div class="design-edit-page-border-type-container">
                    <div class="design-edit-page-dashed-border"></div>
                </div>
                <div class="design-edit-page-border-type-container">
                    <div class="design-edit-page-double-border"></div>
                </div>
            </div>
            <div class="design-edit-page-section-separator"></div>
            <span class="design-edit-page-section-header"><span>Border Color</span></span>
            <button type="button" class="design-edit-page-colour-picker-button button">
                <span>Open Color Palette</span>
            </button>
        </div>
        <div id="edit-color" class="hidden design-edit-page-container">
            <div class="design-edit-page-heading-container">
                <span class="design-edit-page-heading-text">
                    <span>Edit Color</span>
                </span>
            </div>
            <span class="design-edit-page-section-header"><span>Default Color</span></span>
            <div class="design-edit-page-colour-container">
                <button type="button" class="design-edit-page-color-button button">
                    <span></span>
                </button>
            </div>
            <div class="design-edit-page-section-separator"></div>
            <span class="design-edit-page-section-header"><span>Color Picker</span></span>
            <div id="color-box" style="width:200px;height:50px;background: linear-gradient(to right,red, orange, yellow, green, cyan, blue, violet);">
                <div></div>
                <input style=" position: relative; visibility:hidden" id="color-picker" type="color" />
            </div>

            <button type="button" class="design-edit-page-colour-picker-button button">
                <span>Color Picker </span>
            </button>
            <div class="design-edit-page-word-style-container">
                <div class="design-edit-page-font-type-container">
                    <select class="design-edit-page-font-type-select">
                        <option value="Option 1">Option 1</option>
                        <option value="Option 2">Option 2</option>
                        <option value="Times New Roman">Option 3</option>
                        <option value="Option 3">Option 3</option>
                    </select>
                </div>
                <div class="design-edit-page-font-size-container">
                    <button type="button" class="design-edit-page-minus-button">
                        <svg viewBox="0 0 1024 1024" class="design-edit-page-minus-icon">
                            <path d="M213.333 554.667h597.333c23.552 0 42.667-19.115 42.667-42.667s-19.115-42.667-42.667-42.667h-597.333c-23.552 0-42.667 19.115-42.667 42.667s19.115 42.667 42.667 42.667z"></path>
                        </svg>
                    </button>
                    <input type="text"
                           placeholder="16"
                           class="design-edit-page-font-size-button" />
                    <button type="button" class="design-edit-page-add-button">
                        <svg viewBox="0 0 1024 1024" class="design-edit-page-add-icon">
                            <path d="M213.333 554.667h256v256c0 23.552 19.115 42.667 42.667 42.667s42.667-19.115 42.667-42.667v-256h256c23.552 0 42.667-19.115 42.667-42.667s-19.115-42.667-42.667-42.667h-256v-256c0-23.552-19.115-42.667-42.667-42.667s-42.667 19.115-42.667 42.667v256h-256c-23.552 0-42.667 19.115-42.667 42.667s19.115 42.667 42.667 42.667z"></path>
                        </svg>
                    </button>
                </div>
            </div>
            <div class="design-edit-page-word-format-list-container">
                <button type="button" class="design-edit-page-word-format-button">
                    <svg viewBox="0 0 1024 1024" class="design-edit-page-word-format-icon">
                        <path d="M298 214h598v84h-598v-84zM298 554v-84h598v84h-598zM298 810v-84h598v84h-598zM170 704q26 0 45 19t19 45-19 45-45 19-45-19-19-45 19-45 45-19zM170 192q26 0 45 18t19 46-19 46-45 18-45-18-19-46 19-46 45-18zM170 448q26 0 45 18t19 46-19 46-45 18-45-18-19-46 19-46 45-18z"></path>
                    </svg>
                </button>
            </div>
        </div>
        <div class="e-book-design-content-container">
            <div class="e-book-design-top-tab-container">
                <button id="position-button" type="button" class="e-book-design-edit-button button hidden">
                    <span class="e-book-design-text">Position</span>
                </button>
                <div class="e-book-design-button-separator hidden"></div>
                <button id="border-button" type="button" class="e-book-design-edit-button button hidden">
                    <span class="e-book-design-text">Border</span>
                </button>
                <div class="e-book-design-button-separator hidden"></div>
                <button id="style-button" type="button" class="e-book-design-edit-button button hidden">
                    <span class="e-book-design-text">Style</span>
                </button>
                <div class="e-book-design-button-separator hidden"></div>
                <button type="button"
                        id="element-delete-button"
                        class="e-book-design-top-function-icon-button design-page-button hidden">
                    <svg viewBox="0 0 1024 1024"
                         class="e-book-design-top-function-icon">
                        <path d="M662 170h148v86h-596v-86h148l44-42h212zM342 384v426h340v-426h-340zM256 810v-512h512v512q0 34-26 60t-60 26h-340q-34 0-60-26t-26-60z"></path>
                    </svg>
                </button>
                <button type="button"
                    id="element-lock-button"
                        class="e-book-design-top-function-icon-button design-page-button hidden">
                    <svg viewBox="0 0 1024 1024"
                         class="e-book-design-top-function-icon">
                        <path d="M768 854v-428h-512v428h512zM380 256v86h264v-86q0-54-39-93t-93-39-93 39-39 93zM768 342q34 0 60 25t26 59v428q0 34-26 59t-60 25h-512q-34 0-60-25t-26-59v-428q0-34 26-59t60-25h42v-86q0-88 63-151t151-63 151 63 63 151v86h42zM512 726q-34 0-60-26t-26-60 26-60 60-26 60 26 26 60-26 60-60 26z"></path>
                    </svg>
                </button>
                <div class="e-book-design-button-separator hidden"></div>
                <div id="toolbar">
                </div>
            </div>
            <div id="zoom-container" class="e-book-design-book-content-container">
                <div class="e-book-design-book-container" style="width:@(Model.curBook.width)mm">
                    @foreach (var chapter in Model.curBook.Chapters)
                    {
                        <div id="@chapter.chapterID" class="e-book-design-chapter-container">
                            <div class="e-book-design-chapter-header-container">
                                <div class="e-book-design-chapter-horizontal-container">
                                    <span class="e-book-design-chapter-number-text">
                                        Chapter @chapter.chapterNo
                                    </span>
                                    <input value="@chapter.chapterName" type="text"
                                           data-chapter-itemid="@chapter.chapterID"
                                           placeholder="Chapter Name"
                                           class="chapter-name-input e-book-design-chapter-title-input input" />
                                    <button type="button" class="chapter-toggle-button design-page-button">
                                        <svg viewBox="0 0 1024 1024" class="e-book-design-chapter-icon">
                                            <path d="M448 576v416l-160-160-192 192-96-96 192-192-160-160zM1024 96l-192 192 160 160h-416v-416l160 160 192-192z"></path>
                                        </svg>
                                    </button>
                                </div>
                            </div>
                            @foreach (var bookPage in chapter.BookPages)
                            {

                                <div data-page-id="@bookPage.bookPageID" class="design-page-content-container">
                                    <div class="design-page-content-page-tab-list">
                                        <div class="design-page-content-left-container">
                                            <span class="design-page-content-page-text"><span>Page @bookPage.pageNo </span></span>
                                        </div>
                                        <div class="design-page-content-right-container">
                                            @* up button *@
                                            <button type="button"
                                                    class="design-page-content-middle-button design-page-button page-up-button">
                                                <svg viewBox="0 0 1024 1024" class="design-page-content-icon">
                                                    <path d="M798.165 609.835l-256-256c-16.683-16.683-43.691-16.683-60.331 0l-256 256c-16.683 16.683-16.683 43.691 0 60.331s43.691 16.683 60.331 0l225.835-225.835 225.835 225.835c16.683 16.683 43.691 16.683 60.331 0s16.683-43.691 0-60.331z"></path>
                                                </svg>
                                            </button>
                                            @* down button *@
                                            <button type="button"
                                                    class="design-page-content-middle-button design-page-button page-down-button">
                                                <svg viewBox="0 0 1024 1024" class="design-page-content-icon">
                                                    <path d="M225.835 414.165l256 256c16.683 16.683 43.691 16.683 60.331 0l256-256c16.683-16.683 16.683-43.691 0-60.331s-43.691-16.683-60.331 0l-225.835 225.835-225.835-225.835c-16.683-16.683-43.691-16.683-60.331 0s-16.683 43.691 0 60.331z"></path>
                                                </svg>
                                            </button>
                                            @* lock button *@
                                            <button type="button"
                                                    class="design-page-content-middle-button design-page-button page-lock-toggle-button">
                                                <svg viewBox="0 0 1024 1024" class="design-page-content-icon page-lock-icon">
                                                    <path d="M768 854v-428h-512v428h512zM380 256v86h264v-86q0-54-39-93t-93-39-93 39-39 93zM768 342q34 0 60 25t26 59v428q0 34-26 59t-60 25h-512q-34 0-60-25t-26-59v-428q0-34 26-59t60-25h42v-86q0-88 63-151t151-63 151 63 63 151v86h42zM512 726q-34 0-60-26t-26-60 26-60 60-26 60 26 26 60-26 60-60 26z"></path>
                                                </svg>
                                                <svg viewBox="0 0 1024 1024" class="design-page-content-icon page-unlock-icon">
                                                    <path d="M768 854v-428h-512v428h512zM768 342q34 0 60 25t26 59v428q0 34-26 59t-60 25h-512q-34 0-60-25t-26-59v-428q0-34 26-59t60-25h388v-86q0-54-39-93t-93-39-93 39-39 93h-82q0-88 63-151t151-63 151 63 63 151v86h42zM512 726q-34 0-60-26t-26-60 26-60 60-26 60 26 26 60-26 60-60 26z"></path>
                                                </svg>
                                            </button>
                                            @* delete button *@
                                            <button type="button"
                                                    class="design-page-content-middle-button design-page-button page-delete-button">
                                                <svg viewBox="0 0 1024 1024" class="design-page-content-icon">
                                                    <path d="M128 320v640c0 35.2 28.8 64 64 64h576c35.2 0 64-28.8 64-64v-640h-704zM320 896h-64v-448h64v448zM448 896h-64v-448h64v448zM576 896h-64v-448h64v448zM704 896h-64v-448h64v448z"></path>
                                                    <path d="M848 128h-208v-80c0-26.4-21.6-48-48-48h-224c-26.4 0-48 21.6-48 48v80h-208c-26.4 0-48 21.6-48 48v80h832v-80c0-26.4-21.6-48-48-48zM576 128h-192v-63.198h192v63.198z"></path>
                                                </svg>
                                            </button>
                                            @* add button *@
                                            <button type="button" class="design-page-button page-add-button">
                                                <svg viewBox="0 0 1024 1024" class="design-page-content-icon">
                                                    <path d="M810 470v-86h-170v-170h-86v170h-170v86h170v170h86v-170h170zM854 86q34 0 59 25t25 59v512q0 34-25 60t-59 26h-512q-34 0-60-26t-26-60v-512q0-34 26-59t60-25h512zM170 256v598h598v84h-598q-34 0-59-25t-25-59v-598h84z"></path>
                                                </svg>
                                            </button>
                                        </div>
                                    </div>
                                    <div style="height:@(Model.curBook.height)mm" class="design-page-content-page-content">
                                        @foreach (var element in bookPage.Elements)
                                        {
                                            <div id="@element.elementID"
                                                 class="@element.elementType element"
                                                 style="@element.elementStyle">
                                                @* @element.text *@
                                                @Html.Raw(element.text)
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        </div>

                    }

                    <button id="add-chapter-button" type="button"
                            class="e-book-design-add-chapter-button button">
                        Add Chapter
                    </button>
                </div>
            </div>
            <div class="e-book-design-bottom-tab-container">
                <div class="bottom-bar">
                    <span class="e-book-design-page-text">Chapter</span>
                    <input id="scroll-chapter-number-input" type="text" value="1"
                           class="e-book-design-page-input input" />
                    <span class="e-book-design-page-text">Page</span>
                    <input id="scroll-page-number-input" type="text" value="1"
                           class="e-book-design-page-input input" />
@*                     <span class="e-book-design-page-slash-text">
                        <span>/</span>
                        <br />
                    </span>
                    <span class="e-book-design-page-total-text">
                        <span>10</span>
                        <br />
                    </span> *@
                </div>
                <div class="e-book-design-page-separator"></div>
                <div class="bottom-bar">
                    <input id="zoom-scale-input" type="range" min="10" max="400" value="100" class="e-book-design-scale-input input" />
                    <button id="zoom-expandable-button" type="button" class="e-book-design-scale-button button">
                        <span id="zoom-value" class="e-book-design-percentage-text">
                            100%
                        </span>
                        <ul class="zoom-expandable-button-options-list">
                            <li>50%</li>
                            <li>100%</li>
                            <li>200%</li>
                        </ul>
                    </button>
                </div>
                <div class="e-book-design-help-container bottom-bar">
                    <svg viewBox="0 0 877.7142857142857 1024"
                         class="e-book-design-help-icon">
                        <path d="M502.857 685.714v91.429c0 10.286-8 18.286-18.286 18.286h-91.429c-10.286 0-18.286-8-18.286-18.286v-91.429c0-10.286 8-18.286 18.286-18.286h91.429c10.286 0 18.286 8 18.286 18.286zM649.143 402.286c0 81.143-56.571 113.143-98.286 136.571-29.714 17.143-48 28-48 46.286v18.286c0 10.286-8 18.286-18.286 18.286h-91.429c-10.286 0-18.286-8-18.286-18.286v-38.857c0-70.286 50.286-92.571 90.857-110.857 34.286-16 55.429-26.857 55.429-52.571 0-33.143-41.714-57.714-79.429-57.714-20 0-41.143 6.286-54.286 15.429-12.571 8.571-24.571 21.143-45.714 47.429-3.429 4.571-8.571 6.857-14.286 6.857-4 0-8-1.143-10.857-3.429l-61.714-46.857c-7.429-5.714-9.143-16.571-4-24.571 46.857-73.714 112.571-109.714 199.429-109.714v0c93.714 0 198.857 74.286 198.857 173.714zM438.857 146.286c-201.714 0-365.714 164-365.714 365.714s164 365.714 365.714 365.714 365.714-164 365.714-365.714-164-365.714-365.714-365.714zM877.714 512c0 242.286-196.571 438.857-438.857 438.857s-438.857-196.571-438.857-438.857 196.571-438.857 438.857-438.857v0c242.286 0 438.857 196.571 438.857 438.857z"></path>
                    </svg>
                </div>
            </div>
        </div>
    </div>
    <button type="button" class="e-book-design-add-button button">
        <svg viewBox="0 0 1024 1024" class="e-book-design-add-icon">
            <path d="M810 554h-256v256h-84v-256h-256v-84h256v-256h84v256h256v84z"></path>
        </svg>
    </button>
</div>
<link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
<script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
<script>
    // Get references to the color box and the color picker input
    const colorBox = document.getElementById('color-box');
    const colorPicker = document.getElementById('color-picker');

    // Add click event listener to the color box
    colorBox.addEventListener('click', function () {
        // Show the color picker input
        console.log("123");
        colorPicker.click();
    });

    // Add change event listener to the color picker input
    colorPicker.addEventListener('change', function () {
        // Set the background color of the color box to the selected color
        colorBox.style.backgroundColor = colorPicker.value;
    });

    $("#more-option").click(function () {
        var sidebar = $(".sidebar-login-container");
        if (sidebar.css("display") === "none") {
            $(".sidebar-login-container").css("display", "flex");
        }
        else {
            $(".sidebar-login-container").hide();
        }
    })

    function hideAddEditContainer() {
        $(".design-add-page-container").filter(":visible").hide();
        $(".design-edit-page-container").filter(":visible").hide();
    }

    function toggleDisplay(containerId) {
        var container = $("#" + containerId);
        var display = container.css("display");
        hideAddEditContainer();
        if (display === "none") {
            container.css("display", "flex");
        }
    }
    var curActiveQuil = null;
    $(document).ready(function () {
        let drag = false;
        document.addEventListener(
            'mousedown', () => drag = false);

        document.addEventListener(
            'mousemove', () => drag = true);

        const fontSizeArr = ['8px', '9px', '10px', '12px', '14px', '16px', '20px', '24px', '32px', '42px', '54px', '68px', '84px', '98px'];

        var Size = Quill.import('attributors/style/size');
        Size.whitelist = fontSizeArr;
        Quill.register(Size, true);

        var toolbarOptions = [
            ['bold', 'italic', 'underline', 'strike'],        // toggled buttons
           // ['blockquote', 'code-block'],

           // [{ 'header': 1 }, { 'header': 2 }],               // custom button values
            [{ 'list': 'ordered' }, { 'list': 'bullet' }],
            [{ 'script': 'sub' }, { 'script': 'super' }],      // superscript/subscript
           // [{ 'indent': '-1' }, { 'indent': '+1' }],          // outdent/indent

            [{ 'size': fontSizeArr }],  // custom dropdown
        //    [{ 'header': [1, 2, 3, 4, 5, 6, false] }],

            [{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme
            [{ 'font': [] }],
            [{ 'align': [] }],
            // Custom color picker button
           // [{ 'custom-color': '#000000' }]
            ['clean']                                         // remove formatting button
        ];
        // Add a handler for the custom color picker button
        var handlers = {
            'background': function (value) {
                var color = prompt("Please enter a color (hexadecimal value):", "#000000");
                if (color) {
                    this.quill.format('color', color);
                }
            }
        };
        var quillOptions = {
            modules: {
                toolbar: {
                    container: toolbarOptions,
                    handlers: handlers
                }
            },
            theme: 'snow'
        }

        function initQuill(element, globalToolbarContainer) {
            var quill = new Quill(element, quillOptions);
            var currentElement = quill.root;
           
            while (currentElement && !currentElement.classList.contains("element")) {
                currentElement = currentElement.parentElement;
            }

            currentElement.addEventListener("click", function (event) {
                if(event.target.classList.contains("selected") && !drag){
                    quill.root.style.pointerEvents = "auto";
                    quill.focus();
                    curActiveQuil = quill;
                    $(currentElement).removeClass("moveable");
                }
                // Find the <html> element
                var htmlElement = document.querySelector('html');

                // Remove the cursor style
                htmlElement.style.cursor = 'unset';

            })
            quill.on('editor-change', (selection) => {
                selectionChange(selection, quill)
                }
            );

            var toolbar = quill.getModule('toolbar');
            toolbar.container.classList.add("hidden");
            globalToolbarContainer.appendChild(toolbar.container)

            // search for existing toolbar and hide it
            prevToolbar = toolbar.container.previousElementSibling
            if (prevToolbar) {
                hideToolbar(prevToolbar)
            }
        }
        function selectionChange(selection, quill) {
            console.log("selection change", selection, quill)
            console.log(quill.root.parentElement);

            const toolbar = quill.getModule('toolbar')
            if (selection == null) {
                hideToolbar(toolbar.container)
            } else {
                showToolbar(toolbar.container)
            }
        }
        function hideToolbar(toolbarContainer) {
            toolbarContainer.classList.add('hidden')
        }
        function showToolbar(toolbarContainer) {
            // hide all other toolbars
            const siblings = getSiblings(toolbarContainer).map((elem) => elem.classList.add('hidden'))
            toolbarContainer.classList.remove('hidden')
        }

        function getSiblings(elem) {
            // Setup siblings array and get the first sibling
            var siblings = [];
            var sibling = elem.parentNode.firstChild;

            // Loop through each sibling and push to the array
            while (sibling) {
                if (sibling.nodeType === 1 && sibling !== elem) {
                    siblings.push(sibling);
                }
                sibling = sibling.nextSibling
            }

            return siblings;
        };

        var elementList = $(".element");
        for (var i = 0; i < elementList.length; i++) {
            var element = elementList[i];
            if (element.classList.contains("shape")) {
                initQuill(element.querySelector(".editor"), document.querySelector('#toolbar'));
            }
            else if (element.classList.contains("image")) {
            }
            else {
            initQuill(element, document.querySelector('#toolbar'));
        }

        }

        // Function to update the displayed page number based on scroll position
        function updateCurrentPage() {
            // Get the scrollable container and its scroll position
            var container = $('#zoom-container');
            var scrollPosition = container.scrollTop();

            // Get all the sections within the container
            var sections = container.find('.design-page-content-page-content');
            var parentSections;


            // Loop through each section to find which one is currently visible
            var currentPage = 0;
            var currentChapter = 0;

            for (var index = 0; index < sections.length; index++) {
                var section = sections[index];
                var sectionTop = $(section).offset().top;

                // Check if the scroll position is within the current section
                if (sectionTop >= 0) {
                    currentPage = $(section).prev(".design-page-content-page-tab-list").find(".design-page-content-page-text").text().trim().split(" ")[1];
                    parentSections = $(section).closest(".e-book-design-chapter-container");
                    break;
                }
            }

            if (scrollPosition === 0) {
                currentChapter = 1;
                currentPage = 1;
            }
            // Check if the user scrolled to the bottom
            else if (scrollPosition + container.height() >= container[0].scrollHeight) {
                // Get the last chapter and last page
                currentChapter = $('.e-book-design-chapter-container').last().find(".e-book-design-chapter-number-text").text().trim().split(" ")[1];
                currentPage = $('.e-book-design-chapter-container').last().find('.design-page-content-page-content').length;
            }
            else if(parentSections.length > 0){
                console.log(parentSections.find(".e-book-design-chapter-number-text"));
                currentChapter = parentSections.find(".e-book-design-chapter-number-text").text().trim().split(" ")[1];
                console.log(currentChapter);
            }

            // Update the page indicator
            $('#scroll-page-number-input').val(currentPage);
            $('#scroll-chapter-number-input').val(currentChapter);
        }
        // Listen for scroll event on the container and update the displayed page number
        $('#zoom-container').on('scroll', updateCurrentPage);
        async function EditElementFunc(elementID, text, style) {
            $.ajax({
                url: '/eBooks/Design?handler=ElementUpdate', // Endpoint URL for updating the title
                method: 'POST',
                data: { elementID: elementID, text: text, style: style },
                dataType: 'json',
                headers: {
                    RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
                },
                success: function (response) {
                    if (response.status === 0) {
                    }
                    else {
                        alert("fail update. the element is deleted");
                        location.reload();
                    }
                },
                error: function (xhr, status, error) {
                    alert("Error occurred:", error);
                    location.reload();
                    // Handle error
                }

            });

        }
        async function addTextElementFunc(bookPageID, textContent, pageContainer) {
            $.ajax({
                url: '/eBooks/Design?handler=TextElement', // Endpoint URL for updating the title
                method: 'POST',
                data: { bookPageID: bookPageID, textContent: textContent },
                dataType: 'json',
                headers: {
                    RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
                },
                success: function (response) {
                    if (response.status === 0) {
                        pageContainer.append(response.htmlContent);

                                                var newTextElement = pageContainer.find("div.element").last().find(".editor");
                        initQuill(newTextElement[0], document.querySelector('#toolbar'))
                    }
                    else {
                        alert(response.status);
                        location.reload();
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error occurred:", error);
                    // Handle error
                }

            });

        }
        $("#add-text button").click(async function(){
            var chapter = parseInt($("#scroll-chapter-number-input").val());
            var page = parseInt($("#scroll-page-number-input").val());
            var chapterContainer = $(".e-book-design-chapter-container").eq(chapter - 1);
            var pageContent = chapterContainer.find(".design-page-content-container").eq(page - 1);
            var pageID = pageContent.attr("data-page-id");
            var pageContainer = pageContent.find(".design-page-content-page-content");

            var textContent = "<div class='editor' style='border:none'>";
            textContent += $(this).html();
            textContent += "</div>";
            await addTextElementFunc(pageID, textContent, pageContainer);
        })
        async function addImageElementFunc(bookPageID, imageContent, pageContainer) {
            $.ajax({
                url: '/eBooks/Design?handler=ImageElement', // Endpoint URL for updating the title
                method: 'POST',
                data: { bookPageID: bookPageID, imageContent: imageContent },
                dataType: 'json',
                headers: {
                    RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
                },
                success: function (response) {
                    if (response.status === 0) {
                        pageContainer.append(response.htmlContent);
                    }
                    else {
                        alert(response.status);
                        location.reload();
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error occurred:", error);
                    // Handle error
                }

            });

        }
        $(".design-add-page-gallery").click(async function(){
            var chapter = parseInt($("#scroll-chapter-number-input").val());
            var page = parseInt($("#scroll-page-number-input").val());
            var chapterContainer = $(".e-book-design-chapter-container").eq(chapter - 1);
            var pageContent = chapterContainer.find(".design-page-content-container").eq(page - 1);
            var pageID = pageContent.attr("data-page-id");
            var pageContainer = pageContent.find(".design-page-content-page-content");

            var imageStyleContent = "background-image: url('" + $(this).attr("src") + "');";
            imageStyleContent += "background-size: 100% 100%;";
            imageStyleContent += "background-repeat: no-repeat;";
            imageStyleContent += "width: " + this.width + "px;";
            imageStyleContent += "height: " + this.height + "px;";

            await addImageElementFunc(pageID, imageStyleContent, pageContainer);
        })
        $("#upload-photo-input").change(async function (event) {
            var file = event.target.files[0];
            var reader = new FileReader();
            reader.onload = async function (e) {
                var img = new Image();
                img.src = e.target.result;

                img.onload = async function () {

                    var base64Data = e.target.result.split(",")[1]; // Extract base64 data from the result

                    var chapter = parseInt($("#scroll-chapter-number-input").val());
                    var page = parseInt($("#scroll-page-number-input").val());
                    var chapterContainer = $(".e-book-design-chapter-container").eq(chapter - 1);
                    var pageContent = chapterContainer.find(".design-page-content-container").eq(page - 1);
                    var pageID = pageContent.attr("data-page-id");
                    var pageContainer = pageContent.find(".design-page-content-page-content");

                    var imageStyleContent = "background-image: url('data:image/jpg;base64," + base64Data + "');";
                    imageStyleContent += "background-size: 100% 100%;";
                    imageStyleContent += "background-repeat: no-repeat;";
                    imageStyleContent += "width: " + this.width + "px;";
                    imageStyleContent += "height: " + this.height + "px;";

                    await addImageElementFunc(pageID, imageStyleContent, pageContainer);
                 };

            };
            reader.readAsDataURL(file);
        });
        async function addShapeElementFunc(bookPageID, elementType, pageContainer) {
            $.ajax({
                url: '/eBooks/Design?handler=ShapeElement', // Endpoint URL for updating the title
                method: 'POST',
                data: { bookPageID: bookPageID, elementType: elementType },
                dataType: 'json',
                headers: {
                    RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
                },
                success: function (response) {
                    if (response.status === 0) {
                        pageContainer.append(response.htmlContent);

                        var newTextElement = pageContainer.find("div.element").last().find(".editor");
                        initQuill(newTextElement[0], document.querySelector('#toolbar'))
                    }
                    else {
                        location.reload();
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error occurred:", error);
                    // Handle error
                }

            });

        }
        $("div.design-add-page-grid-content button").click(async function () {
            var chapter = parseInt($("#scroll-chapter-number-input").val());
            var page = parseInt($("#scroll-page-number-input").val());
            var chapterContainer = $(".e-book-design-chapter-container").eq(chapter - 1);
            var pageContent = chapterContainer.find(".design-page-content-container").eq(page - 1);
            var pageID = pageContent.attr("data-page-id");
            var pageContainer = pageContent.find(".design-page-content-page-content");
            var type = $(this).attr("id");
            await addShapeElementFunc(pageID, type, pageContainer);


        })
        $("button.chapter-toggle-button").click(function () {
            console.log("chapter-toggle-button is clciekd");
        })
        //zoom function
        $("#zoom-scale-input").change(function () {
            var curZoomValue = $(this).val();
            $("#zoom-value").text(curZoomValue + "%");
            $("#zoom-container").css("zoom", curZoomValue + "%");
        })
        $(".e-book-design-scale-button").click(function () {
            var optionsList = this.querySelector(".zoom-expandable-button-options-list");
            if (optionsList.style.display === "block") {
                optionsList.style.display = "none";
            }
            else {
                optionsList.style.display = "block";
                currentSection = "zoom-button";
            }

        });
        $(".zoom-expandable-button-options-list li").click(function () {
            var zoomValue = $(this).text().split("%")[0];
            $("#zoom-scale-input").val(zoomValue);
            $("#zoom-value").text(zoomValue + "%");
            $("#zoom-container").css("zoom", zoomValue + "%");
        })
        $("input.resizevalue").change(function () {
            $("div.scaleHere").css("zoom", (this).value + "%");
            $("div.resize").css("zoom", 100 + "%");
            $(".resizevalue").html((this).value + "%");
        })
        $("#upload-photo-button").click(function () {
            $("#upload-photo-input").click();
        });
        function updateBookTitle(title) {
            console.log(title);
            return $.ajax({
                url: '/eBooks/Design?handler=BookTitle', // Endpoint URL for updating the title
                method: 'POST',
                //data:{},
                data: { newTitleName: title, bookID: @Model.curBook.bookID },
                dataType: 'json',
                headers: {
                    RequestVerificationToken:
                        $('input:hidden[name="__RequestVerificationToken"]').val()
                }
            });
        }
        $("#element-delete-button").click(async function () {

            var elementSelected = $(".selected");
            var elementID = elementSelected.attr("id");
            try {
                var response = await $.ajax({
                    url: '/eBooks/Design?handler=ElementDelete', // Endpoint URL for updating the title
                    method: 'POST',
                    data: { elementID: elementID },
                    dataType: 'json',
                    headers: {
                        RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
                    }
                });

                console.log("Response:", response); // Log the entire response for debugging
                if (response && response.status === 0) {
                    console.log("element delete successfully!");
                    // Append the HTML content to the specified container
                    elementSelected.remove();
                } else {
                    alert("Error add book chapter try:", response.message);
                    location.reload();
                }
            } catch (error) {
                alert("Error add book chapter:", error);
                locatin.reload();
            }
        })
        $("#add-chapter-button").click(async function () {
            try {
                var response = await $.ajax({
                    url: '/eBooks/Design?handler=Chapter', // Endpoint URL for updating the title
                    method: 'POST',
                    data: { bookID: @Model.curBook.bookID},
                    dataType: 'json',
                    headers: {
                        RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
                    }
                });

                console.log("Response:", response); // Log the entire response for debugging
                if (response && response.status === 0) {
                    console.log("Book chapter add successfully!");
                    // Append the HTML content to the specified container
                    $(this).last().before(response.htmlContent);
                } else {
                    alert("Error add book chapter try:", response.message);
                    location.reload();
                }
            } catch (error) {
                alert("Error add book chapter:", error);
                locatin.reload();
            }

        })
        $(document).on("click", ".page-add-button", async function () {
            var ancestor = $(this).closest('.design-page-content-container');
            console.log(ancestor);
            var chapterAncestor = $(this).closest(".e-book-design-chapter-container");
            console.log(chapterAncestor.attr("id"));
            var chapterId = chapterAncestor.attr("id");
            var pageId = ancestor.data('page-id');
            console.log(pageId);

            try {
                var response = await $.ajax({
                    url: '/eBooks/Design?handler=BookPage', // Endpoint URL for updating the title
                    method: 'POST',
                    data: { bookPageID: pageId },
                    dataType: 'json',
                    headers: {
                        RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
                    }
                });

                console.log("Response:", response); // Log the entire response for debugging
                if (response && response.status === 0) {
                    console.log("Book page add successfully!");

                    // Append the HTML content to the specified container
                    ancestor.after(response.htmlContent);
                    // Find all elements with the class 'e-book-design-chapter-number-text' after the deleted chapter
                    var bookPagesToUpdate = chapterAncestor.find('.design-page-content-page-text span').slice(response.pageNo);


                    // Update the chapter numbers for each chapter after the deleted one
                    bookPagesToUpdate.each(function (index) {
                        console.log($(this).text().trim().split(" ")[1]);
                        $(this).text('Page ' + (parseInt($(this).text().trim().split(" ")[1]) + 1));
                    });

                } else {
                    console.error("Error add book chapter try:", response.message);
                }
            } catch (error) {
                console.error("Error add book chapter:", error);
            }

        })
        $(document).on("click", ".page-delete-button", async function () {
            var ancestor = $(this).closest('.design-page-content-container');
            var pageNo = parseInt(ancestor.find('.design-page-content-page-text span').text().trim().split(" ")[1]);
            var pageId = ancestor.data('page-id');

            // Check if the chapter has any remaining pages
            var chapterAncestor = $(this).closest('.e-book-design-chapter-container');
            var chapterNumber = chapterAncestor.children(".e-book-design-chapter-header-container").find(".e-book-design-chapter-number-text").text().trim().split(" ")[1];
            console.log("Here is something ", chapterNumber, " end of line");

            try {
                var response = await $.ajax({
                    url: '/eBooks/Design?handler=BookPageDelete', // Endpoint URL for updating the title
                    method: 'POST',
                    data: { bookPageID: pageId },
                    dataType: 'json',
                    headers: {
                        RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
                    }
                });

                console.log("Response:", response); // Log the entire response for debugging
                if (response && response.status === 0) {
                    console.log("Bookpage delete successfully!");
                    ancestor.remove();

                    var bookPagesToUpdate = chapterAncestor.find('.design-page-content-page-text span').slice(pageNo - 1);
                    console.log(bookPagesToUpdate);

                    // Update the chapter numbers for each chapter after the deleted one
                    bookPagesToUpdate.each(function (index) {
                        console.log($(this).text().trim().split(" ")[1]);
                        $(this).text('Page ' + (parseInt($(this).text().trim().split(" ")[1]) - 1));
                    });

                    if (response.deleteChapter) {
                        chapterAncestor.remove();

                        // Find all elements with the class 'e-book-design-chapter-number-text' after the deleted chapter
                        var chaptersToUpdate = $('.e-book-design-chapter-container .e-book-design-chapter-number-text').slice(chapterNumber - 1);

                        // Update the chapter numbers for each chapter after the deleted one
                        chaptersToUpdate.each(function (index) {
                            console.log($(this).text().trim().split(" ")[1]);
                            var updatedChapterNumber = chapterNumber + index;
                            $(this).text('Chapter ' + ($(this).text().trim().split(" ")[1] - 1));
                        });
                    }
                    else {
                        ancestor.remove();
                    }
                } else {
                    console.error("Error delete bookpage:", response.message);
                }
            } catch (error) {
                console.error("Error delete bookpage:", error);
            }


        })
        $(document).on("click", ".page-up-button", async function () {
            var ancestor = $(this).closest('.design-page-content-container');
            var previousSibling = ancestor.prev('.design-page-content-container');

            // Check if there is a previous sibling
            if (previousSibling.length > 0) {

                try {
                    var response = await $.ajax({
                        url: '/eBooks/Design?handler=BookPageExchange', // Endpoint URL for updating the title
                        method: 'POST',
                        data: { bookPageID1: ancestor.data("page-id"), bookPageID2: previousSibling.data("page-id") },
                        dataType: 'json',
                        headers: {
                            RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
                        }
                    });

                    console.log("Response:", response); // Log the entire response for debugging
                    if (response && response.status === 0) {
                        console.log("Book page exchange successfully!");

                        // There is a previous sibling
                        ancestor.after(previousSibling);
                        ancestor.find('.design-page-content-page-text span').text("Page " + (parseInt(ancestor.find('.design-page-content-page-text span').text().trim().split(" ")[1]) - 1));
                        previousSibling.find('.design-page-content-page-text span').text("Page " + (parseInt(previousSibling.find('.design-page-content-page-text span').text().trim().split(" ")[1]) + 1));


                    } else {
                        console.error("Error add book chapter try:", response.message);
                    }
                } catch (error) {
                    console.error("Error add book chapter:", error);
                }
            }
        })
        $(document).on("click", ".page-down-button", async function () {
            var ancestor = $(this).closest('.design-page-content-container');
            var nextSibling = ancestor.next('.design-page-content-container');

            // Check if there is a previous sibling
            if (nextSibling.length > 0) {

                try {
                    var response = await $.ajax({
                        url: '/eBooks/Design?handler=BookPageExchange', // Endpoint URL for updating the title
                        method: 'POST',
                        data: { bookPageID1: ancestor.data("page-id"), bookPageID2: nextSibling.data("page-id") },
                        dataType: 'json',
                        headers: {
                            RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
                        }
                    });

                    console.log("Response:", response); // Log the entire response for debugging
                    if (response && response.status === 0) {
                        console.log("Book page exchange successfully!");

                        // There is a previous sibling
                        nextSibling.insertBefore(ancestor);
                        ancestor.find('.design-page-content-page-text span').text("Page " + (parseInt(ancestor.find('.design-page-content-page-text span').text().trim().split(" ")[1]) + 1));
                        nextSibling.find('.design-page-content-page-text span').text("Page " + (parseInt(nextSibling.find('.design-page-content-page-text span').text().trim().split(" ")[1]) - 1));


                    } else {
                        console.error("Error add book chapter try:", response.message);
                    }
                } catch (error) {
                    console.error("Error add book chapter:", error);
                }
            }
        })
        $(document).on("change", ".chapter-name-input", async function () {
            try {
                var response = await $.ajax({
                    url: '/eBooks/Design?handler=ChapterTitle', // Endpoint URL for updating the title
                    method: 'POST',
                    data: { chapterID: $(this).data("chapter-itemid"), chapterName: $(this).val() },
                    dataType: 'json',
                    headers: {
                        RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
                    }
                });

                console.log("Response:", response); // Log the entire response for debugging
                if (response && response.status === 0) {
                    console.log("Chapter name update successfully!");

                } else {
                    console.error("Error change book chapter:", response.message);
                }
            } catch (error) {
                console.error("Error change book chapter:", error);
            }
        })

        // Add event listener for input event on the input field
        $("#border-width").on("input", function () {
            // Get the entered value
            var enteredValue = $(this).val();

            // Remove any non-numeric characters except dot (.)
            var sanitizedValue = enteredValue.replace(/[^0-9.]/g, '');
            

            // Ensure there is at most one dot in the value
            var dotIndex = sanitizedValue.indexOf('.');
            if (dotIndex !== -1) {
                var remainingValue = sanitizedValue.substring(dotIndex + 1);
                sanitizedValue = sanitizedValue.substring(0, dotIndex + 1) + remainingValue.replace('.', '');
            }

            // Remove leading zeros unless they are followed by a dot
            sanitizedValue = sanitizedValue.replace(/^0+(?!$|\.)/, '');

            // Add back a single leading zero if the value is zero and not followed by a dot
            if (sanitizedValue === '' || sanitizedValue === '.') {
                sanitizedValue = '0';
            }

            // Ensure the value is between 0 and 100 (exclusive)
            var numericValue = parseFloat(sanitizedValue);
            if (isNaN(numericValue) || numericValue < 0) {
                // If value is not a number or out of range, revert to the previous value
                $(this).val(0);
            }
            else if (numericValue >= 100){
                $(this).val(100)
            } else {
                // Save the current value as the previous value
                $(this).data('previousValue', sanitizedValue);

                // Update the input value with the sanitized value
                $(this).val(sanitizedValue);
            }
        });
        // Get the page dimensions
        var pageWidth = @Model.curBook.width;
        var pageHeight = @Model.curBook.height;

        $(document).on("click", ".element-up-button", async function () {
            var currentElement = $(".selected");
            var nextElement = currentElement.next('.element');
            // Check if there is a previous sibling
            if (nextElement.length > 0) {

                try {
                    var response = await $.ajax({
                        url: '/eBooks/Design?handler=ElementExchange', // Endpoint URL for updating the title
                        method: 'POST',
                        data: { elementID1: currentElement.attr("id"), elementID2: nextElement.attr("id") },
                        dataType: 'json',
                        headers: {
                            RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
                        }
                    });

                    console.log("Response:", response); // Log the entire response for debugging
                    if (response && response.status === 0) {
                        console.log("element exchange successfully!");

                        // There is a previous sibling
                        nextElement.after(currentElement);
                    } else {
                        alert("Error exchange element:", response.message);
                    }
                } catch (error) {
                    alert("Error exchange element:", error);
                }
            }
        })
        $(document).on("click", ".element-down-button", async function () {
            var currentElement = $(".selected");
            var prevElement = currentElement.prev('.element');
            // Check if there is a previous sibling
            if (prevElement.length > 0) {

                try {
                    var response = await $.ajax({
                        url: '/eBooks/Design?handler=ElementExchange', // Endpoint URL for updating the title
                        method: 'POST',
                        data: { elementID1: currentElement.attr("id"), elementID2: prevElement.attr("id") },
                        dataType: 'json',
                        headers: {
                            RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
                        }
                    });

                    console.log("Response:", response); // Log the entire response for debugging
                    if (response && response.status === 0) {
                        // There is a previous sibling
                        currentElement.after(prevElement);
                    } else {
                        alert("Error exchange element:", response.message);
                    }
                } catch (error) {
                    alert("Error exchange element:", error);
                }
            }
        })

        $("#print-button").click(function(){
            // Get the content of the specified div
            var chapterList = $(".e-book-design-chapter-container");
            var pageWidth = '@Model.curBook.width';
            var pageHeight = '@Model.curBook.height';


            // Open a new window for printing
            var printWindow = window.open('', '_blank');
            printWindow.document.open();


            // Customize the document size using CSS
            printWindow.document.write('<html><head><title>');
            printWindow.document.write('@Model.curBook.title');
            printWindow.document.write('</title>');
            printWindow.document.write('<style>');
            printWindow.document.write('@@page { size: ' + pageWidth + 'mm ' + pageHeight + 'mm; }'); // Customize the document size based on book width and height
            printWindow.document.write('p { margin:0}'); // CSS rule to force page break after each page
            printWindow.document.write('.page { overflow:hidden;page-break-after: always; position:relative;width:' + pageWidth + 'mm;height:' + pageHeight + 'mm}'); // CSS rule to force page break after each page
            printWindow.document.write('.ql-editor {position:relative;box-sizing:border-box;line-height: 1.42;height: 100%;outline: none;padding: 12px 15px;tab-size: 4;-moz-tab-size: 4;text-align: left;white-space: pre-wrap;word-wrap: break-word;font-family: Helvetica, Arial, sans-serif; font-size: 13px;}'); // CSS rule to force page break after each page

            printWindow.document.write('</style>');
            printWindow.document.write('</head><body>');

            for (var i = 0; i < chapterList.length; i++) {
                var pageList = $(chapterList[i]).find(".design-page-content-page-content");
                var chapterName = $(chapterList[i]).find(".chapter-name-input").val();
                var chapterNumber = "Chapter " + (i+1); 
                printWindow.document.write('<div class="page" style="display: flex; justify-content: center; align-items: center;">');
                printWindow.document.write('<div style="text-align:center">' + chapterNumber + '<br> ' + chapterName + '</div>'); // Add chapter name and number
                printWindow.document.write('</div>');
              //  printWindow.document.write(chapterContent);
                for (var j = 0; j < pageList.length; j++) {
                    printWindow.document.write('<div class="page">');
                    var elementList = $(pageList[j]).find(".element");
                    for (var k = 0; k < elementList.length; k++){
                        console.log(elementList[k].style);
                        if (elementList[k].classList.contains("text")) {
                            printWindow.document.write('<div style="' + $(elementList[k]).attr("style") + '">');
                            printWindow.document.write('<div class="ql-editor">')
                            printWindow.document.write(elementList[k].querySelector(".ql-editor").innerHTML);
                            printWindow.document.write("</div>");
                            printWindow.document.write("</div>");
                        }
                        else if (elementList[k].classList.contains("image")){
                            printWindow.document.write(elementList[k].outerHTML);
                        }
                        else if (elementList[k].classList.contains("shape")) {
                            printWindow.document.write('<div style="' + $(elementList[k]).attr("style") + '">');
                            printWindow.document.write(elementList[k].querySelector(".clip-path").outerHTML);
                            printWindow.document.write('<div class="ql-editor">')
                            printWindow.document.write(elementList[k].querySelector(".ql-editor").innerHTML);
                            printWindow.document.write("</div>");
                            printWindow.document.write("</div>");
                        }
                    }
    
                    printWindow.document.write("</div>");
                }
            }


            printWindow.document.write("</body" + "></h" + "tml>");
            printWindow.document.close();

            //Trigger the print dialog for the print window
            printWindow.print();
        })
        $("#x-position").on("input", function () {
            var enteredValue = $(this).val();            // Get the entered value
            var sanitizedValue = enteredValue.replace(/[^0-9.]/g, '');            // Remove any non-numeric characters except dot (.)

            // Ensure there is at most one dot in the value
            var dotIndex = sanitizedValue.indexOf('.');
            if (dotIndex !== -1) {
                var remainingValue = sanitizedValue.substring(dotIndex + 1);
                sanitizedValue = sanitizedValue.substring(0, dotIndex + 1) + remainingValue.replace(/\./g, '');
            }

            // Limit the number of decimal places to 4
            var decimalIndex = sanitizedValue.indexOf('.');
            if (decimalIndex !== -1) {
                var integerPart = sanitizedValue.substring(0, decimalIndex);
                var decimalPart = sanitizedValue.substring(decimalIndex + 1, decimalIndex + 5); // Limit to 4 decimal places
                sanitizedValue = integerPart + '.' + decimalPart;
            }

            // Remove leading zeros unless they are followed by a dot
            sanitizedValue = sanitizedValue.replace(/^0+(?!$|\.)/, '');

            // Add back a single leading zero if the value is zero and not followed by a dot
            if (sanitizedValue === '' || sanitizedValue === '.') {
                sanitizedValue = '0';
            }

            // Ensure the value is between 0 and 100 (exclusive)
            var numericValue = parseFloat(sanitizedValue);
            if (isNaN(numericValue)) {
                // If value is not a number or out of range, revert to the previous value
                $(this).val(0);
      //      } else if (numericValue >= 100) {
      //          $(this).val(100);
            } else {
                // Save the current value as the previous value
                $(this).data('previousValue', sanitizedValue);

                // Update the input value with the sanitized value
                $(this).val(sanitizedValue);
            }
        });

        // Restrict y-position input
        $("#y-position").on("input", function () {
            var enteredValue = $(this).val();            // Get the entered value
            var sanitizedValue = enteredValue.replace(/[^0-9.]/g, '');            // Remove any non-numeric characters except dot (.)

            // Ensure there is at most one dot in the value
            var dotIndex = sanitizedValue.indexOf('.');
            if (dotIndex !== -1) {
                var remainingValue = sanitizedValue.substring(dotIndex + 1);
                sanitizedValue = sanitizedValue.substring(0, dotIndex + 1) + remainingValue.replace(/\./g, '');
            }

            // Limit the number of decimal places to 4
            var decimalIndex = sanitizedValue.indexOf('.');
            if (decimalIndex !== -1) {
                var integerPart = sanitizedValue.substring(0, decimalIndex);
                var decimalPart = sanitizedValue.substring(decimalIndex + 1, decimalIndex + 5); // Limit to 4 decimal places
                sanitizedValue = integerPart + '.' + decimalPart;
            }

            // Remove leading zeros unless they are followed by a dot
            sanitizedValue = sanitizedValue.replace(/^0+(?!$|\.)/, '');

            // Add back a single leading zero if the value is zero and not followed by a dot
            if (sanitizedValue === '' || sanitizedValue === '.') {
                sanitizedValue = '0';
            }

            // Ensure the value is between 0 and 100 (exclusive)
            var numericValue = parseFloat(sanitizedValue);
            if (isNaN(numericValue)) {
                // If value is not a number or out of range, revert to the previous value
                $(this).val(0);
                //      } else if (numericValue >= 100) {
                //          $(this).val(100);
            } else {
                // Save the current value as the previous value
                $(this).data('previousValue', sanitizedValue);

                // Update the input value with the sanitized value
                $(this).val(sanitizedValue);
            }
        });

        // Restrict width input
        $("#width").on("input", function () {
            var enteredValue = $(this).val();            // Get the entered value
            var sanitizedValue = enteredValue.replace(/[^0-9.]/g, '');            // Remove any non-numeric characters except dot (.)

            // Ensure there is at most one dot in the value
            var dotIndex = sanitizedValue.indexOf('.');
            if (dotIndex !== -1) {
                var remainingValue = sanitizedValue.substring(dotIndex + 1);
                sanitizedValue = sanitizedValue.substring(0, dotIndex + 1) + remainingValue.replace(/\./g, '');
            }

            // Limit the number of decimal places to 4
            var decimalIndex = sanitizedValue.indexOf('.');
            if (decimalIndex !== -1) {
                var integerPart = sanitizedValue.substring(0, decimalIndex);
                var decimalPart = sanitizedValue.substring(decimalIndex + 1, decimalIndex + 5); // Limit to 4 decimal places
                sanitizedValue = integerPart + '.' + decimalPart;
            }

            // Remove leading zeros unless they are followed by a dot
            sanitizedValue = sanitizedValue.replace(/^0+(?!$|\.)/, '');

            // Add back a single leading zero if the value is zero and not followed by a dot
            if (sanitizedValue === '' || sanitizedValue === '.') {
                sanitizedValue = '0';
            }

            // Ensure the value is between 0 and 100 (exclusive)
            var numericValue = parseFloat(sanitizedValue);
            if (isNaN(numericValue)) {
                // If value is not a number or out of range, revert to the previous value
                $(this).val(0);
                //      } else if (numericValue >= 100) {
                //          $(this).val(100);
            } else {
                // Save the current value as the previous value
                $(this).data('previousValue', sanitizedValue);

                // Update the input value with the sanitized value
                $(this).val(sanitizedValue);
            }
        });

        // Restrict height input
        $("#height").on("input", function () {
            var enteredValue = $(this).val();            // Get the entered value
            var sanitizedValue = enteredValue.replace(/[^0-9.]/g, '');            // Remove any non-numeric characters except dot (.)

            // Ensure there is at most one dot in the value
            var dotIndex = sanitizedValue.indexOf('.');
            if (dotIndex !== -1) {
                var remainingValue = sanitizedValue.substring(dotIndex + 1);
                sanitizedValue = sanitizedValue.substring(0, dotIndex + 1) + remainingValue.replace(/\./g, '');
            }

            // Limit the number of decimal places to 4
            var decimalIndex = sanitizedValue.indexOf('.');
            if (decimalIndex !== -1) {
                var integerPart = sanitizedValue.substring(0, decimalIndex);
                var decimalPart = sanitizedValue.substring(decimalIndex + 1, decimalIndex + 5); // Limit to 4 decimal places
                sanitizedValue = integerPart + '.' + decimalPart;
            }

            // Remove leading zeros unless they are followed by a dot
            sanitizedValue = sanitizedValue.replace(/^0+(?!$|\.)/, '');

            // Add back a single leading zero if the value is zero and not followed by a dot
            if (sanitizedValue === '' || sanitizedValue === '.') {
                sanitizedValue = '0';
            }

            // Ensure the value is between 0 and 100 (exclusive)
            var numericValue = parseFloat(sanitizedValue);
            if (isNaN(numericValue)) {
                // If value is not a number or out of range, revert to the previous value
                $(this).val(0);
                //      } else if (numericValue >= 100) {
                //          $(this).val(100);
            } else {
                // Save the current value as the previous value
                $(this).data('previousValue', sanitizedValue);

                // Update the input value with the sanitized value
                $(this).val(sanitizedValue);
            }
        });

        // Restrict rotate-position input
        $("#rotate-position").on("input", function () {
            var enteredValue = $(this).val();            // Get the entered value
            var sanitizedValue = enteredValue.replace(/[^0-9.]/g, '');            // Remove any non-numeric characters except dot (.)

            // Ensure there is at most one dot in the value
            var dotIndex = sanitizedValue.indexOf('.');
            if (dotIndex !== -1) {
                var remainingValue = sanitizedValue.substring(dotIndex + 1);
                sanitizedValue = sanitizedValue.substring(0, dotIndex + 1) + remainingValue.replace(/\./g, '');
            }

            // Limit the number of decimal places to 4
            var decimalIndex = sanitizedValue.indexOf('.');
            if (decimalIndex !== -1) {
                var integerPart = sanitizedValue.substring(0, decimalIndex);
                var decimalPart = sanitizedValue.substring(decimalIndex + 1, decimalIndex + 6); // Limit to 4 decimal places
                sanitizedValue = integerPart + '.' + decimalPart;
            }

            // Remove leading zeros unless they are followed by a dot
            sanitizedValue = sanitizedValue.replace(/^0+(?!$|\.)/, '');

            // Add back a single leading zero if the value is zero and not followed by a dot
            if (sanitizedValue === '' || sanitizedValue === '.') {
                sanitizedValue = '0';
            }

            // Ensure the value is between 0 and 100 (exclusive)
            var numericValue = parseFloat(sanitizedValue);
            if (isNaN(numericValue)) {
                // If value is not a number or out of range, revert to the previous value
                $(this).val(0);
                //      } else if (numericValue >= 100) {
                //          $(this).val(100);
            } else {
                // Save the current value as the previous value
                $(this).data('previousValue', sanitizedValue);

                // Update the input value with the sanitized value
                $(this).val(sanitizedValue);
            }
        });
        // Attach event handler when input field gains focus
        $("#x-position").focus(function () {
            $(this).on("change", function () {
                 $(".selected").css("left",$(this).val() +"px");
            });
        });
        $("#y-position").focus(function () {
            $(this).on("change", function () {
                $(".selected").css("top", $(this).val() + "px");
            });
        });
        $("#width").focus(function () {
            $(this).on("change", function () {
                $(".selected").css("width", $(this).val() + "px");
            });
        });
        $("#height").focus(function () {
            $(this).on("change", function () {
                $(".selected").css("height", $(this).val() + "px");
            });
        });
        $("#rotate-position").focus(function () {
            $(this).on("change", function () {
                $(".selected").css("transform", "rotate(" + $(this).val() + "rad)");
            });
        });
        // Detach event handler when input field loses focus
        $("#x-position,#y-position,#rotate-position,#width,#height").focusout(function () {
            $(this).off("change");
        });
        // Add event listener for input event on the border roundness input field
        $("#border-round").on("input", function () {
            // Get the entered value
            var enteredValue = $(this).val();

            // Remove any non-numeric characters
            var sanitizedValue = enteredValue.replace(/[^0-9]/g, '');

            // Ensure the value is between 0 and 100 (exclusive)
            var numericValue = parseInt(sanitizedValue);
            if (isNaN(numericValue)  || numericValue < 0) {
                // If value is not a number or out of range, revert to the previous value
                $(this).val(0);
            }
            else if (numericValue >= 100) {
                $(this).val(100);
            } else {
                // Save the current value as the previous value
                $(this).data('previousValue', sanitizedValue);

                // Update the input value with the sanitized value
                $(this).val(sanitizedValue);
            }
        });
        $("#border-width, #border-round").change(function () {

            var selectedContainer = $(".selected");
            if (selectedContainer.length > 0) {
                console.log("selected", selectedContainer);
                if (selectedContainer.hasClass("text") || selectedContainer.hasClass("image")) {
                    var border = $(this).attr("id");

                    switch (border) {
                        case "border-width":
                            selectedContainer.css("border-width", $(this).val() + "px");
                            $(".selected").css('--border-width', $(this).val() + "px");
                            break;
                        case "border-round":
                            selectedContainer.css("border-radius", $(this).val() + "px");
                            break;

                    }
                }
            }
        })
        $(".design-edit-page-border-type-container").click(function(){
            var borderTypeList = $(".selected-border-type").not(this);
            for(var i = 0 ; i < borderTypeList.length ; i++){
                borderTypeList.removeClass("selected-border-type");
            }
            $(this).addClass("selected-border-type");
            var borderClass = $(this).find("div");
            console.log(borderClass);
            if (borderClass.hasClass("design-edit-page-no-border")) {
                $(".selected").css("border-style", "none");
            }
            else if (borderClass.hasClass("design-edit-page-solid-border")) {
                $(".selected").css("border-style", "solid");
            }
            else if (borderClass.hasClass("design-edit-page-dotted-border")) {
                $(".selected").css("border-style", "dotted");
            }
            else if (borderClass.hasClass("design-edit-page-dashed-border")) {
                $(".selected").css("border-style", "dashed");
            }
            else if (borderClass.hasClass("design-edit-page-double-border")) {
                $(".selected").css("border-style", "double");
            }
            $(".selected").css('--border-width', $(".selected").css("border-width"));

        })
        $("#ebook-title-input").change(async function () {
            var newTitle = $(this).val(); // Get the new title from the input field
            try {
                //var response = await testing(newTitle); // Send the AJAX request to update the title
                var response = await updateBookTitle(newTitle); // Send the AJAX request to update the title

                console.log("Response:", response); // Log the entire response for debugging
                if (response && response.status === 0) {
                    console.log("Book title updated successfully!");
                } else {
                    console.error("Error updating book title try:", response.message);
                }
            } catch (error) {
                console.error("Error updating book title:", error);
            }
        })
        $(".e-book-design-edit-button, .e-book-design-element-container").click(function () {
            // Remove the 'tab-selected' class from all other elements
            $(".e-book-design-edit-button, .e-book-design-element-container").not(this).removeClass("tab-selected").each(function () {

                var openTab = "";
                switch ($(this).attr("id")) {
                    case "position-button":
                        openTab = "edit-position";
                        break;
                    case "border-button":
                        openTab = "edit-border";
                        break;
                    case "style-button":
                        openTab = "edit-style";
                        break;
                    case "add-text-tab-button":
                        openTab = "add-text";
                        break;
                    case "add-chart-tab-button":
                        openTab = "add-chart";
                        break;
                    case "add-image-tab-button":
                        openTab = "add-image";
                        break;
                    case "add-shape-tab-button":
                        openTab = "add-shape";
                        break;
                    default:
                        break;
                }

                $("#" + openTab).addClass("hidden");
            })


            // Toggle the 'tab-selected' class on the clicked element
            $(this).toggleClass("tab-selected");
            var idValue = console.log($(this).attr("id"));
            var openTab = "";
            switch ($(this).attr("id")) {
                case "position-button":
                    openTab = "edit-position";
                    break;
                case "border-button":
                    openTab = "edit-border";
                    break;
                case "style-button":
                    openTab = "edit-style";
                    break;
                case "add-text-tab-button":
                    openTab = "add-text";
                    break;
                case "add-chart-tab-button":
                    openTab = "add-chart";
                    break;
                case "add-image-tab-button":
                    openTab = "add-image";
                    break;
                case "add-shape-tab-button":
                    openTab = "add-shape";
                    break;
                default:
                    break;
            }
            if ($(this).hasClass("tab-selected")) {
                switch(openTab){
                    case "edit-border":
                        retrieveBorderValue($(".selected"));
                        break;
                    case "edit-position":
                        retrievePositionValue($(".selected"));
                        break;
                }
                
                $("#" + openTab).removeClass("hidden");
            }
            else{
                $("#" + openTab).addClass("hidden");
            }
        })

        function findParentDiv(element) {
            let parent = element.parentNode;
            
            while (parent !== document.documentElement) {
                if (parent.nodeName === 'DIV') {
                    // Parent is a <div> tag
                    return parent;
                }
                parent = parent.parentNode;
                console.log(parent);
            }
            // No parent <div> container found
            return null;
        }
        // Select the element when clicked
        $(document).click(async function (event) {
         //   console.log("document is clicked");
            console.log("This is the container being clicked",event.target);
            // Check if the clicked element or one of its ancestors has the 'selected' class
            let clickedElement = $(event.target);
            let isAncestorOrSelf = clickedElement.closest(".selected, .pointer, .rotation-handle, .ql-editor, .ql-script, .ql-toolbar, .e-book-design-top-tab-container, .pointer, .design-edit-page-container ").length > 0;
            let isDiv = clickedElement.prop('nodeName') === "DIV";

            if(isAncestorOrSelf){
                console.log('Clicked element or ancestor meets the condition isAncestorOrSelf');
            }
            else if ($(event.target).hasClass("element")) {
                var prevSelectedElement = $(".selected");
                if (prevSelectedElement.length > 0) {
                    prevSelectedElement.removeClass("selected");
                    prevSelectedElement.removeClass("moveable");
                    $(".rotation-handle").remove();
                    $(".pointer").remove();

                    var content;
                    if (prevSelectedElement.hasClass("shape")){
                        content = prevSelectedElement.find("div:first")[0].outerHTML;
                        content += "<div class='editor' style='border:none'>";
                        content += prevSelectedElement.find(".ql-editor").html();
                        content += "</div>";
                    }
                    else if (prevSelectedElement.hasClass("image")) {
                        content = "";
                    }
                    else if (prevSelectedElement.hasClass("text")) {
                        content = "<div class='editor' style='border:none'>";
                        content += prevSelectedElement.find(".ql-editor").html();
                        content += "</div>";
                        console.log(content);
                    }

                    await EditElementFunc(prevSelectedElement.attr("id"), content, prevSelectedElement.attr("style"));

                }
                if(curActiveQuil !== null){
                    console.log("this quil remove selection have been triggered", curActiveQuil);
                    curActiveQuil.root.style.pointerEvents = "none";
                    curActiveQuil.blur();
                    console.log(curActiveQuil);
                    curActiveQuil = null;

                }

                $(".ql-toolbar").addClass("hidden");
                // Add the 'selected' class to the clicked element if it has the 'element' class
                
                $(event.target).css('--border-width', $(event.target).css("border-width"));
                $(event.target).addClass("selected moveable");
                $(event.target).append('<div class="rotation-handle">&circlearrowright;</div>'
                    + "<div class='top left pointer'></div>"
                    + "<div class='top right pointer'></div>"
                    + "<div class='bottom left pointer'></div>"
                    + "<div class='bottom right pointer'></div>");

                toggleTabListContainer($(event.target));
                var showingTab = $(".design-edit-page-container:not(.hidden)");
                if(showingTab.length > 0){
                    var id = showingTab.attr("id");
                    if(id === "edit-position"){
                        retrievePositionValue($(event.target));
                    }
                    else if(id === "edit-border"){
                        retrieveBorderValue($(event.target));
                    }
                }
            } else {
                var prevSelectedElement = $(".selected");
                if (prevSelectedElement.length > 0) {
                    prevSelectedElement.removeClass("selected");
                    prevSelectedElement.removeClass("moveable");
                    $(".rotation-handle").remove();
                    $(".pointer").remove();
                    var content;
                    if (prevSelectedElement.hasClass("shape")){
                        content = prevSelectedElement.find("div:first")[0].outerHTML;
                        content += "<div class='editor' style='border:none'>";
                        content += prevSelectedElement.find(".ql-editor").html();
                        content += "</div>";
                    }
                    else if (prevSelectedElement.hasClass("image")) {
                        content = "";
                    }
                    else if (prevSelectedElement.hasClass("text")) {
                        content = "<div class='editor' style='border:none'>";
                        content += prevSelectedElement.find(".ql-editor").html();
                        content += "</div>";
                        console.log(content);

                    }

                    await EditElementFunc(prevSelectedElement.attr("id"), content, prevSelectedElement.attr("style"));
                }
                $(".ql-toolbar").addClass("hidden");

                if (curActiveQuil !== null) {
                    console.log("this quil remove selection have been triggered");
                    curActiveQuil.root.style.pointerEvents = "none";
                    curActiveQuil.blur();
                   curActiveQuil = null;
                }

                toggleTabListContainer($(event.target));
            }
        });

        function retrievePositionValue(container){
            var xPosition = extractNumericValue(container.css("left"));
            $("#x-position").val(xPosition);
            var yPosition = extractNumericValue(container.css("top"));
            $("#y-position").val(yPosition);
            var rotatePosition = getContainerRotationAngle(container[0]);
            $("#rotate-position").val(rotatePosition);
            var width = extractNumericValue(container.css("width"));
            $("#width").val(width);
            var height = extractNumericValue(container.css("height"));
            $("#height").val(height);
        }

        function retrieveBorderValue(container){
            var borderWidth = extractNumericValue(container.css("border-width"));
            $("#border-width").val(borderWidth);

            var borderRadius = extractNumericValue(container.css("border-radius"));
            $("#border-round").val(borderRadius);

            var borderStyle = container.css("border-style");
            $(".selected-border-type").removeClass("selected-border-type");
            var classSelected = "";
            switch (borderStyle) {
                case "none":
                    $(".design-edit-page-no-border").closest(".design-edit-page-border-type-container").addClass("selected-border-type");
                    break;
                case "solid":
                    $(".design-edit-page-solid-border").closest(".design-edit-page-border-type-container").addClass("selected-border-type");
                    break;
                case "dotted":
                    $(".design-edit-page-dotted-border").closest(".design-edit-page-border-type-container").addClass("selected-border-type");
                    break;
                case "dashed":
                    $(".design-edit-page-dashed-border").closest(".design-edit-page-border-type-container").addClass("selected-border-type");
                    break;
                case "double":
                    $(".design-edit-page-double-border").closest(".design-edit-page-border-type-container").addClass("selected-border-type");
                    break;

            }
        }

        // Function to extract numeric value from a CSS property value
        function extractNumericValue(value) {
            // Remove any non-numeric characters
            return parseFloat(value.replace(/[^\d.]/g, ''));
        }

        function toggleTabListContainer(container) {
            if (container.hasClass("text")) {
                $("#position-button").removeClass("hidden");
                $("#position-button").next("div").removeClass("hidden");
                $("#border-button").removeClass("hidden");
                $("#border-button").next("div").removeClass("hidden");
                $("#element-delete-button").removeClass("hidden");
                $("#element-lock-button").removeClass("hidden");
            }
            else if (container.hasClass("image")) {
                $("#position-button").removeClass("hidden");
                $("#position-button").next("div").removeClass("hidden");
                $("#border-button").removeClass("hidden");
                $("#border-button").next("div").removeClass("hidden");
                $("#element-delete-button").removeClass("hidden");
                $("#element-lock-button").removeClass("hidden");
            }
            else if (container.hasClass("shape")) {
                $("#position-button").removeClass("hidden");
                $("#position-button").next("div").removeClass("hidden");
                $("#border-button").addClass("hidden");
                $("#border-button").next("div").addClass("hidden");
                $("#edit-border").addClass("hidden");
                $("#border-button").removeClass("tab-selected");
                $("#element-delete-button").removeClass("hidden");
                $("#element-lock-button").removeClass("hidden");
            }
            else {
                $("#position-button").addClass("hidden");
                $("#position-button").next("div").addClass("hidden");
                $("#border-button").addClass("hidden");
                $("#border-button").next("div").addClass("hidden");
                $("#element-delete-button").addClass("hidden");
                $("#element-lock-button").addClass("hidden");
                $("#edit-position").addClass("hidden");
                $("#position-button").removeClass("tab-selected");
                $("#edit-border").addClass("hidden");
                $("#border-button").removeClass("tab-selected");
                $("#edit-style").addClass("hidden");
                $("#style-button").removeClass("tab-selected");
            }
        }


        //resize drag
        interact(".selected").resizable({
                preserveAspectRatio: false,
                edges: {
                    left: ".left",
                    right: ".right",
                    bottom: ".bottom",
                    top: ".top",
                },
            })
            .on("resizemove", function (event) {
                console.log("123");
                var rotationAngle = getContainerRotationAngle(document.querySelector(".selected"))
                var target = event.target;
                var containerRect = target.parentElement.getBoundingClientRect(); // Get the bounding rectangle of the parent container
                // Calculate mouse position relative to the parent container
                var mouseX = event.clientX - containerRect.left;
                var mouseY = event.clientY - containerRect.top;

                // Calculate initial container position
                var left = parseFloat(target.style.left) || 0; // initial container left
                var top = parseFloat(target.style.top) || 0; // initial container top
                var width = target.offsetWidth;
                var height = target.offsetHeight;

                var rectangle = {
                    x: left,
                    y: top,
                    width: width,
                    height: height
                }

                if (event.edges.top && event.edges.left) {
                    adjustRectangleTopLeft(rectangle, mouseX, mouseY, rotationAngle);
                }
                else if (event.edges.bottom && event.edges.left) {
                    adjustRectangleBottomLeft(rectangle, mouseX, mouseY, rotationAngle);
                }
                else if (event.edges.right && event.edges.bottom) {
                    adjustRectangleBottomRight(rectangle, mouseX, mouseY, rotationAngle);
                }
                else if (event.edges.right && event.edges.top) {
                    adjustRectangleTopRight(rectangle, mouseX, mouseY, rotationAngle);
                }

                if (rectangle.width < 10) {
                    rectangle.width = width;
                    rectangle.x = left;
                }
                if (rectangle.height < 10) {
                    rectangle.height = height;
                    rectangle.y = top;
                }

                target.style.width = rectangle.width + 'px';
                target.style.height = rectangle.height + 'px';
                target.style.left = rectangle.x + 'px';
                target.style.top = rectangle.y + 'px';

                $("#x-position").val(rectangle.x);
                $("#y-position").val(rectangle.y);
                $("#width").val(rectangle.width);
                $("#height").val(rectangle.height);
            });
        interact(".moveable").draggable({

            inertia: false,
            // keep the element within the area of it's parent
            restrict: {
                restriction: "none",
                endOnly: true,
                elementRect: { top: 0, left: 0, bottom: 1, right: 1 },
            },
            // enable autoScroll
            autoScroll: false,

            onstart: function (event) {
                console.log("onstart");
            },

            // call this function on every dragmove event
            onmove: dragMoveListener,
            // call this function on every dragend event
            onend: function (event) {
                console.log("drag move event end ");
            },
        });
        interact(".rotation-handle").draggable({
            onstart: function (event) {
                var box = event.target.parentElement;
                var rect = box.getBoundingClientRect();

                // store the center as the element has css `transform-origin: center center`
                box.setAttribute("data-center-x", rect.left + rect.width / 2);
                box.setAttribute("data-center-y", rect.top + rect.height / 2);
                // get the angle of the element when the drag starts
                box.setAttribute("data-angle", getDragAngle(event));
            },
            onmove: function (event) {
                var box = event.target.parentElement;

                var angle = getDragAngle(event);

                // update transform style on dragmove
                box.style.transform =
                    "rotate(" +
                    angle +
                    "rad" +
                    ")";

                $("#rotate-position").val(angle);
            },
            onend: function (event) {
                var box = event.target.parentElement;

                // save the angle on dragend
                box.setAttribute("data-angle", getDragAngle(event));



            },
        });

        // Rotate function
        function getDragAngle(event) {
            var box = event.target.parentElement;
            var startAngle = parseFloat(box.getAttribute("data-angle")) || 0;
            var center = {
                x: parseFloat(box.getAttribute("data-center-x")) || 0,
                y: parseFloat(box.getAttribute("data-center-y")) || 0,
            };
            var angle = Math.atan2(
                center.y - event.clientY,
                center.x - event.clientX
            );

            return angle - startAngle;
        }

        // Resize function
        // Function to get the rotation angle of the container
        function getContainerRotationAngle(container) {
            // Get the rotation angle of the container
            if (container !== null) {
                var containerTransform = container.style.transform;
                var match = containerTransform.match(/rotate\(([^)]+)\)/);
                if (match && match[1]) {
                    return parseFloat(match[1]) || 0;
                }
            }
            return 0;
        }
        function rotate(x, y, cx, cy, angle) {

            return [
                (x - cx) * Math.cos(angle) - (y - cy) * Math.sin(angle) + cx,
                (x - cx) * Math.sin(angle) + (y - cy) * Math.cos(angle) + cy,
            ];
        }
        function adjustRectangleBottomRight(rectangle, bottomRightX, bottomRightY, angle) {
   
            const center = [
                rectangle.x + rectangle.width / 2,
                rectangle.y + rectangle.height / 2
            ];
            
            const cx = center[0];
            const cy = center[1];
        
            const rotatedA = rotate(rectangle.x, rectangle.y, cx, cy, angle);

            const newCenter = [
                (rotatedA[0] + bottomRightX) / 2,
                (rotatedA[1] + bottomRightY) / 2,
            ];
            const newTopLeft = rotate(
                rotatedA[0],
                rotatedA[1],
                newCenter[0],
                newCenter[1],
                -angle
            );
            const newBottomRight = rotate(
                bottomRightX,
                bottomRightY,
                newCenter[0],
                newCenter[1],
                -angle
            );

            rectangle.x = newTopLeft[0];
            rectangle.y = newTopLeft[1];
            rectangle.width = newBottomRight[0] - newTopLeft[0];
            rectangle.height = newBottomRight[1] - newTopLeft[1];

        }
        function adjustRectangleTopLeft(rectangle, topLeftX, topLeftY, angle) {

            const center = [
                rectangle.x + rectangle.width / 2,
                rectangle.y + rectangle.height / 2
            ];

            const cx = center[0];
            const cy = center[1];

            // Rotate the bottom-right corner
            const rotatedD = rotate(rectangle.x + rectangle.width, rectangle.y + rectangle.height, cx, cy, angle);

            // Calculate new center of the rectangle
            const newCenter = [
                (rotatedD[0] + topLeftX) / 2,
                (rotatedD[1] + topLeftY) / 2,
            ];

            // Calculate new bottom-right corner after rotation
            const newTopLeft = rotate(
                topLeftX,
                topLeftY,
                newCenter[0],
                newCenter[1],
                -angle
            );
            const newBottomRight = rotate(
                rotatedD[0],
                rotatedD[1],
                newCenter[0],
                newCenter[1],
                -angle
            );

            rectangle.x = newTopLeft[0];
            rectangle.y = newTopLeft[1];
            rectangle.width = newBottomRight[0] - newTopLeft[0];
            rectangle.height = newBottomRight[1] - newTopLeft[1];
        }
        function adjustRectangleTopRight(rectangle, topRightX, topRightY, angle) {

            const center = [
                rectangle.x + rectangle.width / 2,
                rectangle.y + rectangle.height / 2
            ];

            const cx = center[0];
            const cy = center[1];

            // Rotate the bottom-right corner
            const rotatedC = rotate(rectangle.x, rectangle.y + rectangle.height, cx, cy, angle);

            // Calculate new center of the rectangle
            const newCenter = [
                (rotatedC[0] + topRightX) / 2,
                (rotatedC[1] + topRightY) / 2,
            ];

            const newTopRight = rotate(
                topRightX,
                topRightY,
                newCenter[0],
                newCenter[1],
                -angle
            );
            const newBottomLeft = rotate(
                rotatedC[0],
                rotatedC[1],
                newCenter[0],
                newCenter[1],
                -angle
            );

            rectangle.x = newBottomLeft[0];
            rectangle.y = newTopRight[1];
            rectangle.width = newTopRight[0] - newBottomLeft[0];
            rectangle.height = newBottomLeft[1] - newTopRight[1];
        }
        function adjustRectangleBottomLeft(rectangle, bottomLeftX, bottomLeftY, angle) {

            const center = [
                rectangle.x + rectangle.width / 2,
                rectangle.y + rectangle.height / 2
            ];

            const cx = center[0];
            const cy = center[1];

            // Rotate the bottom-right corner
            const rotatedB = rotate(rectangle.x + rectangle.width, rectangle.y, cx, cy, angle);

            // Calculate new center of the rectangle
            const newCenter = [
                (rotatedB[0] + bottomLeftX) / 2,
                (rotatedB[1] + bottomLeftY) / 2,
            ];

            const newTopRight = rotate(
                rotatedB[0],
                rotatedB[1],
                newCenter[0],
                newCenter[1],
                -angle
            );
            const newBottomLeft = rotate(
                bottomLeftX,
                bottomLeftY,
                newCenter[0],
                newCenter[1],
                -angle
            );

            rectangle.x = newBottomLeft[0];
            rectangle.y = newTopRight[1];
            rectangle.width = newTopRight[0] - newBottomLeft[0];
            rectangle.height = newBottomLeft[1] - newTopRight[1];
        }
        // Move function
        function dragMoveListener(event) {
            if (!drag) {
                return;
                console.log("end drag");
            }
            // Get the parent container element
            var parentContainer = event.target.parentElement;

            // Get the parent container's bounding rectangle
            var parentRect = parentContainer.getBoundingClientRect();

            // Get the current mouse coordinates
            var mouseX = event.clientX;
            var mouseY = event.clientY;

            // Check if the mouse cursor is outside the parent container
            if (
                mouseX < parentRect.left ||
                mouseX > parentRect.right ||
                mouseY < parentRect.top ||
                mouseY > parentRect.bottom
            ) {
                // Stop the drag operation
                event.stopPropagation();
                event.stopImmediatePropagation();


            }
            else {
                // If the mouse cursor is still inside the parent container, continue with the drag operation

                var target = event.target,
                    // keep the dragged position in the data-x/data-y attributes
                    x = (parseFloat(target.style.left) || 0) + event.dx,
                    y = (parseFloat(target.style.top) || 0) + event.dy;

                // Set the top and left styles of the target element
                target.style.top = y + "px";
                target.style.left = x + "px";
                $("#x-position").val(x);
                $("#y-position").val(y);
            }


        }

    })


</script>


